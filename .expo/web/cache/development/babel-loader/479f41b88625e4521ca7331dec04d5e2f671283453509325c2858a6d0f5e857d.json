{"ast":null,"code":"import { API_ENDPOINTS } from './apiConfig';\nimport locationService from './locationService';\nclass EmergencyService {\n  constructor() {\n    this.isEmergencyActive = false;\n    this.emergencyStartTime = null;\n    this.sosInterval = null;\n    this.locationUpdateInterval = null;\n  }\n  async initiateSOS() {\n    try {\n      await locationService.startEmergencyLocationTracking();\n      this.isEmergencyActive = true;\n      this.emergencyStartTime = new Date();\n      const initialLocation = await locationService.getCurrentLocation();\n      console.log('Mock: Initiating SOS emergency with data:', {\n        timestamp: new Date().toISOString(),\n        location: initialLocation,\n        deviceInfo: await this.getDeviceInfo()\n      });\n      this.setupContinuousLocationUpdates();\n      return {\n        success: true,\n        message: 'SOS emergency initiated successfully',\n        emergencyId: 'mock-emergency-' + Date.now()\n      };\n    } catch (error) {\n      console.error('Error initiating mock SOS emergency:', error);\n      locationService.startEmergencyLocationTracking().catch(err => console.error('Failed to start emergency location tracking:', err));\n      throw error;\n    }\n  }\n  setupContinuousLocationUpdates() {\n    if (this.locationUpdateInterval) {\n      clearInterval(this.locationUpdateInterval);\n    }\n    this.locationUpdateInterval = setInterval(async () => {\n      try {\n        if (!this.isEmergencyActive) {\n          this.clearIntervals();\n          return;\n        }\n        const location = await locationService.getCurrentLocation();\n        console.log('Mock: Sending emergency location update to backend:', {\n          emergencyMode: true,\n          timestamp: new Date().toISOString(),\n          location,\n          sosActiveDuration: this.getSOSActiveDuration()\n        });\n      } catch (error) {\n        console.error('Error in mock continuous location update:', error);\n      }\n    }, 10000);\n  }\n  async getDeviceInfo() {\n    return {\n      deviceId: await locationService.getDeviceId(),\n      platform: 'Expo',\n      appVersion: '1.0.0'\n    };\n  }\n  getSOSActiveDuration() {\n    if (!this.emergencyStartTime) return 0;\n    const now = new Date();\n    const durationMs = now - this.emergencyStartTime;\n    return Math.floor(durationMs / 1000);\n  }\n  async sendLocationToGuardians() {\n    try {\n      const location = await locationService.getCurrentLocation();\n      console.log('Mock: Sending location to guardians:', {\n        emergencyType: 'sos',\n        location,\n        message: 'I need help! Here is my current location.',\n        timestamp: new Date().toISOString()\n      });\n      await new Promise(resolve => setTimeout(resolve, 800));\n      return {\n        success: true,\n        message: 'Location sent to 3 guardians successfully',\n        guardiansPinged: ['Guardian 1', 'Guardian 2', 'Guardian 3']\n      };\n    } catch (error) {\n      console.error('Error in mock sendLocationToGuardians:', error);\n      throw error;\n    }\n  }\n  async callPoliceAndNGO() {\n    try {\n      const location = await locationService.getCurrentLocation();\n      console.log('Mock: Notifying authorities:', {\n        notifyPolice: true,\n        notifyNGO: true,\n        location,\n        timestamp: new Date().toISOString()\n      });\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      return {\n        success: true,\n        message: 'Authorities notified successfully',\n        policeReferenceNumber: 'POL-' + Math.floor(100000 + Math.random() * 900000),\n        ngoReferenceNumber: 'NGO-' + Math.floor(100000 + Math.random() * 900000)\n      };\n    } catch (error) {\n      console.error('Error in mock callPoliceAndNGO:', error);\n      throw error;\n    }\n  }\n  async saveEvidenceToBlockchain(voiceRecording) {\n    try {\n      const location = await locationService.getCurrentLocation();\n      console.log('Mock: Saving evidence to blockchain:', {\n        hasVoiceRecording: voiceRecording !== null,\n        location,\n        timestamp: new Date().toISOString()\n      });\n      await new Promise(resolve => setTimeout(resolve, 1500));\n      return {\n        success: true,\n        message: 'Evidence saved successfully',\n        blockchainTransactionId: 'tx-' + Date.now().toString(16),\n        evidenceHash: 'hash-' + Math.random().toString(36).substring(2, 15)\n      };\n    } catch (error) {\n      console.error('Error in mock saveEvidenceToBlockchain:', error);\n      throw error;\n    }\n  }\n  async stopEmergencyAlert() {\n    try {\n      this.clearIntervals();\n      this.isEmergencyActive = false;\n      await locationService.stopLocationTracking();\n      console.log('Mock: Cancelling emergency:', {\n        timestamp: new Date().toISOString(),\n        emergencyDuration: this.getSOSActiveDuration()\n      });\n      this.emergencyStartTime = null;\n      return {\n        success: true,\n        message: 'Emergency alert stopped successfully',\n        duration: this.getSOSActiveDuration() + ' seconds'\n      };\n    } catch (error) {\n      console.error('Error in mock stopEmergencyAlert:', error);\n      throw error;\n    }\n  }\n  clearIntervals() {\n    if (this.sosInterval) {\n      clearInterval(this.sosInterval);\n      this.sosInterval = null;\n    }\n    if (this.locationUpdateInterval) {\n      clearInterval(this.locationUpdateInterval);\n      this.locationUpdateInterval = null;\n    }\n  }\n  async getEmergencyStatus() {\n    try {\n      return {\n        isActive: this.isEmergencyActive,\n        startTime: this.emergencyStartTime,\n        duration: this.getSOSActiveDuration()\n      };\n    } catch (error) {\n      console.error('Error getting emergency status:', error);\n      throw error;\n    }\n  }\n}\nconst emergencyService = new EmergencyService();\nexport default emergencyService;","map":{"version":3,"names":["API_ENDPOINTS","locationService","EmergencyService","constructor","isEmergencyActive","emergencyStartTime","sosInterval","locationUpdateInterval","initiateSOS","startEmergencyLocationTracking","Date","initialLocation","getCurrentLocation","console","log","timestamp","toISOString","location","deviceInfo","getDeviceInfo","setupContinuousLocationUpdates","success","message","emergencyId","now","error","catch","err","clearInterval","setInterval","clearIntervals","emergencyMode","sosActiveDuration","getSOSActiveDuration","deviceId","getDeviceId","platform","appVersion","durationMs","Math","floor","sendLocationToGuardians","emergencyType","Promise","resolve","setTimeout","guardiansPinged","callPoliceAndNGO","notifyPolice","notifyNGO","policeReferenceNumber","random","ngoReferenceNumber","saveEvidenceToBlockchain","voiceRecording","hasVoiceRecording","blockchainTransactionId","toString","evidenceHash","substring","stopEmergencyAlert","stopLocationTracking","emergencyDuration","duration","getEmergencyStatus","isActive","startTime","emergencyService"],"sources":["C:/Users/PC/OneDrive/latest/SafeMitraLatest/services/emergencyService.js"],"sourcesContent":["// Mock emergency service implementation that doesn't depend on external libraries\r\nimport { API_ENDPOINTS } from './apiConfig';\r\nimport locationService from './locationService';\r\n\r\nclass EmergencyService {\r\n  constructor() {\r\n    this.isEmergencyActive = false;\r\n    this.emergencyStartTime = null;\r\n    this.sosInterval = null;\r\n    this.locationUpdateInterval = null;\r\n  }\r\n\r\n  // Initiate SOS emergency protocol (mock implementation)\r\n  async initiateSOS() {\r\n    try {\r\n      // Start the emergency tracking mode with high frequency location updates\r\n      await locationService.startEmergencyLocationTracking();\r\n      \r\n      // Mark emergency as active\r\n      this.isEmergencyActive = true;\r\n      this.emergencyStartTime = new Date();\r\n      \r\n      // Get initial location\r\n      const initialLocation = await locationService.getCurrentLocation();\r\n      \r\n      // Simulate API call to notify backend about emergency\r\n      console.log('Mock: Initiating SOS emergency with data:', {\r\n        timestamp: new Date().toISOString(),\r\n        location: initialLocation,\r\n        deviceInfo: await this.getDeviceInfo(),\r\n      });\r\n      \r\n      // Set up automatic location updates to backend at regular intervals\r\n      this.setupContinuousLocationUpdates();\r\n      \r\n      return {\r\n        success: true,\r\n        message: 'SOS emergency initiated successfully',\r\n        emergencyId: 'mock-emergency-' + Date.now()\r\n      };\r\n    } catch (error) {\r\n      console.error('Error initiating mock SOS emergency:', error);\r\n      // Even if the mock API call fails, we should still track location locally\r\n      locationService.startEmergencyLocationTracking().catch(err => \r\n        console.error('Failed to start emergency location tracking:', err)\r\n      );\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Setup continuous location updates to backend during emergency (mock implementation)\r\n  setupContinuousLocationUpdates() {\r\n    // Clear any existing intervals\r\n    if (this.locationUpdateInterval) {\r\n      clearInterval(this.locationUpdateInterval);\r\n    }\r\n    \r\n    // Set new interval to simulate sending location to backend every 10 seconds\r\n    this.locationUpdateInterval = setInterval(async () => {\r\n      try {\r\n        if (!this.isEmergencyActive) {\r\n          this.clearIntervals();\r\n          return;\r\n        }\r\n        \r\n        // Get current location\r\n        const location = await locationService.getCurrentLocation();\r\n        \r\n        // Simulate sending update to backend\r\n        console.log('Mock: Sending emergency location update to backend:', {\r\n          emergencyMode: true,\r\n          timestamp: new Date().toISOString(),\r\n          location,\r\n          sosActiveDuration: this.getSOSActiveDuration(),\r\n        });\r\n        \r\n      } catch (error) {\r\n        console.error('Error in mock continuous location update:', error);\r\n        // Don't stop the interval on error, keep trying\r\n      }\r\n    }, 10000); // Update every 10 seconds\r\n  }\r\n\r\n  // Get device information for emergency reporting\r\n  async getDeviceInfo() {\r\n    // This would typically include device type, OS, app version, etc.\r\n    return {\r\n      deviceId: await locationService.getDeviceId(),\r\n      platform: 'Expo',\r\n      appVersion: '1.0.0',\r\n    };\r\n  }\r\n\r\n  // Get duration for which SOS has been active\r\n  getSOSActiveDuration() {\r\n    if (!this.emergencyStartTime) return 0;\r\n    \r\n    const now = new Date();\r\n    const durationMs = now - this.emergencyStartTime;\r\n    return Math.floor(durationMs / 1000); // Return duration in seconds\r\n  }\r\n\r\n  // Send location to guardians (mock implementation)\r\n  async sendLocationToGuardians() {\r\n    try {\r\n      const location = await locationService.getCurrentLocation();\r\n      \r\n      // Simulate API call to send location to guardians\r\n      console.log('Mock: Sending location to guardians:', {\r\n        emergencyType: 'sos',\r\n        location,\r\n        message: 'I need help! Here is my current location.',\r\n        timestamp: new Date().toISOString(),\r\n      });\r\n      \r\n      // Simulate a delay to mimic network latency\r\n      await new Promise(resolve => setTimeout(resolve, 800));\r\n      \r\n      return {\r\n        success: true,\r\n        message: 'Location sent to 3 guardians successfully',\r\n        guardiansPinged: ['Guardian 1', 'Guardian 2', 'Guardian 3']\r\n      };\r\n    } catch (error) {\r\n      console.error('Error in mock sendLocationToGuardians:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Call police and NGO with current location (mock implementation)\r\n  async callPoliceAndNGO() {\r\n    try {\r\n      const location = await locationService.getCurrentLocation();\r\n      \r\n      // Simulate API call to authorities\r\n      console.log('Mock: Notifying authorities:', {\r\n        notifyPolice: true,\r\n        notifyNGO: true,\r\n        location,\r\n        timestamp: new Date().toISOString(),\r\n      });\r\n      \r\n      // Simulate a delay to mimic network latency\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n      \r\n      return {\r\n        success: true,\r\n        message: 'Authorities notified successfully',\r\n        policeReferenceNumber: 'POL-' + Math.floor(100000 + Math.random() * 900000),\r\n        ngoReferenceNumber: 'NGO-' + Math.floor(100000 + Math.random() * 900000)\r\n      };\r\n    } catch (error) {\r\n      console.error('Error in mock callPoliceAndNGO:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Save voice recording and location as evidence (mock implementation)\r\n  async saveEvidenceToBlockchain(voiceRecording) {\r\n    try {\r\n      const location = await locationService.getCurrentLocation();\r\n      \r\n      // Simulate API call to save evidence\r\n      console.log('Mock: Saving evidence to blockchain:', {\r\n        hasVoiceRecording: voiceRecording !== null,\r\n        location,\r\n        timestamp: new Date().toISOString()\r\n      });\r\n      \r\n      // Simulate a delay to mimic blockchain storage\r\n      await new Promise(resolve => setTimeout(resolve, 1500));\r\n      \r\n      return {\r\n        success: true,\r\n        message: 'Evidence saved successfully',\r\n        blockchainTransactionId: 'tx-' + Date.now().toString(16),\r\n        evidenceHash: 'hash-' + Math.random().toString(36).substring(2, 15)\r\n      };\r\n    } catch (error) {\r\n      console.error('Error in mock saveEvidenceToBlockchain:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Stop emergency alert (mock implementation)\r\n  async stopEmergencyAlert() {\r\n    try {\r\n      // Clear any ongoing intervals\r\n      this.clearIntervals();\r\n      \r\n      // Reset state\r\n      this.isEmergencyActive = false;\r\n      \r\n      // Stop emergency location tracking\r\n      await locationService.stopLocationTracking();\r\n      \r\n      // Simulate notifying backend that emergency is over\r\n      console.log('Mock: Cancelling emergency:', {\r\n        timestamp: new Date().toISOString(),\r\n        emergencyDuration: this.getSOSActiveDuration(),\r\n      });\r\n      \r\n      // Reset emergency start time\r\n      this.emergencyStartTime = null;\r\n      \r\n      return {\r\n        success: true,\r\n        message: 'Emergency alert stopped successfully',\r\n        duration: this.getSOSActiveDuration() + ' seconds'\r\n      };\r\n    } catch (error) {\r\n      console.error('Error in mock stopEmergencyAlert:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Clear all intervals\r\n  clearIntervals() {\r\n    if (this.sosInterval) {\r\n      clearInterval(this.sosInterval);\r\n      this.sosInterval = null;\r\n    }\r\n    \r\n    if (this.locationUpdateInterval) {\r\n      clearInterval(this.locationUpdateInterval);\r\n      this.locationUpdateInterval = null;\r\n    }\r\n  }\r\n\r\n  // Get current emergency status\r\n  async getEmergencyStatus() {\r\n    try {\r\n      // This could be an API call or just return the local status\r\n      return {\r\n        isActive: this.isEmergencyActive,\r\n        startTime: this.emergencyStartTime,\r\n        duration: this.getSOSActiveDuration(),\r\n      };\r\n    } catch (error) {\r\n      console.error('Error getting emergency status:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\n// Create and export a singleton instance\r\nconst emergencyService = new EmergencyService();\r\nexport default emergencyService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}