{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PC\\\\OneDrive\\\\latest\\\\SafeMitraLatest\\\\screen\\\\functional-part\\\\HotwordDetectionScreen.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { Ionicons } from '@expo/vector-icons';\nimport { useNavigation } from '@react-navigation/native';\nimport { Audio } from 'expo-av';\nimport * as FileSystem from 'expo-file-system';\nimport SafeMitraLogo from '../../components/SafeMitraLogo';\nimport styles from '../styles-part/HotwordDetectionScreenStyles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ASSEMBLY_API_KEY = '6582380b8a8e49cb81545a91e76c8960';\nconst HOTWORDS = ['sos', 'help', 'bachaao'];\nconst RECORDING_INTERVAL = 5000;\nconst HotwordDetectionScreen = () => {\n  const navigation = useNavigation();\n  const [isListening, setIsListening] = useState(false);\n  const [recording, setRecording] = useState(null);\n  const [transcript, setTranscript] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const recordingRef = useRef(null);\n  const recordingIntervalRef = useRef(null);\n  useEffect(() => {\n    return () => {\n      if (recordingRef.current) {\n        recordingRef.current.stopAndUnloadAsync();\n        recordingRef.current = null;\n      }\n      if (recording) {\n        recording.stopAndUnloadAsync();\n      }\n      if (recordingIntervalRef.current) {\n        clearInterval(recordingIntervalRef.current);\n      }\n    };\n  }, []);\n  const sendSOSStatusToBackend = async isActive => {\n    try {\n      if (isActive) {\n        console.log('ðŸš¨ SOS TRIGGERED SUCCESSFULLY!');\n        Alert.alert('SOS Triggered', 'Emergency alert has been activated!');\n      } else {\n        console.log('SOS Status: Deactivated');\n      }\n    } catch (error) {\n      console.error('Error updating SOS status:', error);\n    }\n  };\n  async function startRecording() {\n    try {\n      setIsLoading(true);\n      if (recordingRef.current) {\n        try {\n          await recordingRef.current.stopAndUnloadAsync();\n        } catch (err) {\n          console.log('Cleanup error:', err);\n        }\n        recordingRef.current = null;\n      }\n      if (recording) {\n        try {\n          await recording.stopAndUnloadAsync();\n        } catch (err) {\n          console.log('Cleanup error:', err);\n        }\n      }\n      const {\n        status\n      } = await Audio.requestPermissionsAsync();\n      if (status !== 'granted') {\n        Alert.alert('Permission Required', 'Please grant microphone permission to use this feature');\n        return;\n      }\n      await Audio.setAudioModeAsync({\n        allowsRecordingIOS: true,\n        playsInSilentModeIOS: true\n      });\n      const startContinuousRecording = async () => {\n        try {\n          const {\n            recording\n          } = await Audio.Recording.createAsync(Audio.RecordingOptionsPresets.HIGH_QUALITY);\n          recordingRef.current = recording;\n          setRecording(recording);\n          setIsListening(true);\n          console.log('Recording started');\n          setTimeout(async () => {\n            if (recordingRef.current) {\n              await processRecording();\n              setTimeout(() => {\n                if (isListening) {\n                  startContinuousRecording();\n                }\n              }, 2000);\n            }\n          }, RECORDING_INTERVAL);\n        } catch (err) {\n          console.error('Failed to start continuous recording:', err);\n          setTimeout(() => {\n            if (isListening) {\n              startContinuousRecording();\n            }\n          }, 3000);\n        }\n      };\n      startContinuousRecording();\n    } catch (err) {\n      console.error('Failed to start recording', err);\n      Alert.alert('Error', 'Failed to start recording');\n    } finally {\n      setIsLoading(false);\n    }\n  }\n  async function processRecording() {\n    try {\n      if (!recordingRef.current) return;\n      const uri = recordingRef.current.getURI();\n      console.log('Processing recording from:', uri);\n      try {\n        await recordingRef.current.stopAndUnloadAsync();\n      } catch (err) {\n        console.log('Recording already stopped');\n      }\n      const uploadUrl = await uploadToAssembly(uri);\n      if (!uploadUrl) {\n        console.log('Failed to get upload URL');\n        return;\n      }\n      const transcriptText = await transcribeWithAssembly(uploadUrl);\n      if (transcriptText) {\n        setTranscript(transcriptText);\n        console.log('Transcript:', transcriptText);\n        const matched = HOTWORDS.find(word => transcriptText.toLowerCase().includes(word));\n        if (matched) {\n          console.log('ðŸš¨ SOS Triggered: Hotword Detected â†’', matched);\n          await sendSOSStatusToBackend(true);\n          navigation.navigate('AutoAlertActive');\n        }\n      }\n    } catch (err) {\n      console.error('Error processing recording:', err);\n    }\n  }\n  async function stopRecording() {\n    try {\n      setIsLoading(true);\n      if (recordingRef.current) {\n        await recordingRef.current.stopAndUnloadAsync();\n        recordingRef.current = null;\n      }\n      if (recording) {\n        await recording.stopAndUnloadAsync();\n      }\n      await sendSOSStatusToBackend(false);\n    } catch (err) {\n      console.error('Error stopping recording:', err);\n    } finally {\n      setIsLoading(false);\n      setRecording(null);\n      setIsListening(false);\n    }\n  }\n  async function uploadToAssembly(audioUri) {\n    try {\n      const formData = new FormData();\n      formData.append('audio', {\n        uri: audioUri,\n        type: 'audio/m4a',\n        name: 'recording.m4a'\n      });\n      const response = await fetch('https://api.assemblyai.com/v2/upload', {\n        method: 'POST',\n        headers: {\n          authorization: ASSEMBLY_API_KEY\n        },\n        body: formData\n      });\n      if (!response.ok) {\n        throw new Error(`Upload failed: ${response.status}`);\n      }\n      const data = await response.json();\n      return data.upload_url;\n    } catch (error) {\n      console.error('Upload failed:', error);\n      return null;\n    }\n  }\n  async function transcribeWithAssembly(audioUrl) {\n    try {\n      const response = await fetch('https://api.assemblyai.com/v2/transcript', {\n        method: 'POST',\n        headers: {\n          authorization: ASSEMBLY_API_KEY,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          audio_url: audioUrl,\n          language_code: 'en'\n        })\n      });\n      const data = await response.json();\n      const transcriptId = data.id;\n      let completed = false;\n      let transcriptText = '';\n      while (!completed) {\n        await new Promise(res => setTimeout(res, 1000));\n        const pollingRes = await fetch(`https://api.assemblyai.com/v2/transcript/${transcriptId}`, {\n          headers: {\n            authorization: ASSEMBLY_API_KEY\n          }\n        });\n        const pollingData = await pollingRes.json();\n        if (pollingData.status === 'completed') {\n          completed = true;\n          transcriptText = pollingData.text;\n        } else if (pollingData.status === 'error') {\n          throw new Error(pollingData.error);\n        }\n      }\n      return transcriptText;\n    } catch (error) {\n      console.error('Transcription failed:', error);\n      return '';\n    }\n  }\n  const toggleHotwordDetection = async () => {\n    if (isListening) {\n      await stopRecording();\n    } else {\n      await startRecording();\n    }\n  };\n  return _jsxDEV(SafeAreaView, {\n    style: styles.container,\n    children: [_jsxDEV(View, {\n      style: styles.header,\n      children: [_jsxDEV(TouchableOpacity, {\n        style: styles.backButton,\n        onPress: () => navigation.goBack(),\n        children: _jsxDEV(Ionicons, {\n          name: \"arrow-back\",\n          size: 24,\n          color: \"#FF3B30\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 9\n      }, this), _jsxDEV(View, {\n        style: styles.logoContainer,\n        children: [_jsxDEV(SafeMitraLogo, {\n          color: \"#FF3B30\",\n          size: 30\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 11\n        }, this), _jsxDEV(Text, {\n          style: styles.logoText,\n          children: \"SafeMitra\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 7\n    }, this), _jsxDEV(View, {\n      style: styles.content,\n      children: [isLoading && _jsxDEV(ActivityIndicator, {\n        size: \"large\",\n        color: \"#FF3B30\",\n        style: styles.loadingIndicator\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 23\n      }, this), _jsxDEV(View, {\n        style: styles.hotwordCard,\n        children: [_jsxDEV(View, {\n          style: styles.statusIndicator,\n          children: [_jsxDEV(View, {\n            style: [styles.statusDot, {\n              backgroundColor: isListening ? '#4CAF50' : '#FF3B30'\n            }]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 317,\n            columnNumber: 13\n          }, this), _jsxDEV(Text, {\n            style: styles.statusText,\n            children: isListening ? 'Status: Listening' : 'Status: Paused'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 321,\n            columnNumber: 13\n          }, this), _jsxDEV(TouchableOpacity, {\n            style: styles.toggleButton,\n            onPress: toggleHotwordDetection,\n            disabled: isLoading,\n            children: _jsxDEV(Text, {\n              style: styles.toggleButtonText,\n              children: isListening ? 'Stop Recording' : 'Start Recording'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 331,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 326,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 11\n        }, this), _jsxDEV(View, {\n          style: styles.mainContent,\n          children: [_jsxDEV(View, {\n            style: styles.iconContainer,\n            children: [_jsxDEV(Ionicons, {\n              name: \"mic\",\n              size: 40,\n              color: \"#FF3B30\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 341,\n              columnNumber: 15\n            }, this), _jsxDEV(View, {\n              style: styles.waveformContainer,\n              children: [_jsxDEV(View, {\n                style: [styles.waveform, styles.waveform1]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 343,\n                columnNumber: 17\n              }, this), _jsxDEV(View, {\n                style: [styles.waveform, styles.waveform2]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 344,\n                columnNumber: 17\n              }, this), _jsxDEV(View, {\n                style: [styles.waveform, styles.waveform3]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 345,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 342,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 340,\n            columnNumber: 13\n          }, this), _jsxDEV(Text, {\n            style: styles.title,\n            children: \"Voice Hotword Detection\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 350,\n            columnNumber: 13\n          }, this), _jsxDEV(Text, {\n            style: styles.description,\n            children: \"SafeMitra is listening for emergency keywords: \\\"SOS\\\", \\\"Help\\\", \\\"Bachaao\\\"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 353,\n            columnNumber: 13\n          }, this), transcript ? _jsxDEV(View, {\n            style: styles.transcriptContainer,\n            children: [_jsxDEV(Text, {\n              style: styles.transcriptLabel,\n              children: \"Last Transcript:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 360,\n              columnNumber: 17\n            }, this), _jsxDEV(Text, {\n              style: styles.transcriptText,\n              children: transcript\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 361,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 359,\n            columnNumber: 15\n          }, this) : null]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 295,\n    columnNumber: 5\n  }, this);\n};\nexport default HotwordDetectionScreen;","map":{"version":3,"names":["React","useState","useEffect","useRef","View","TouchableOpacity","SafeAreaView","Text","ActivityIndicator","Alert","Ionicons","useNavigation","Audio","FileSystem","SafeMitraLogo","styles","jsxDEV","_jsxDEV","ASSEMBLY_API_KEY","HOTWORDS","RECORDING_INTERVAL","HotwordDetectionScreen","navigation","isListening","setIsListening","recording","setRecording","transcript","setTranscript","isLoading","setIsLoading","recordingRef","recordingIntervalRef","current","stopAndUnloadAsync","clearInterval","sendSOSStatusToBackend","isActive","console","log","alert","error","startRecording","err","status","requestPermissionsAsync","setAudioModeAsync","allowsRecordingIOS","playsInSilentModeIOS","startContinuousRecording","Recording","createAsync","RecordingOptionsPresets","HIGH_QUALITY","setTimeout","processRecording","uri","getURI","uploadUrl","uploadToAssembly","transcriptText","transcribeWithAssembly","matched","find","word","toLowerCase","includes","navigate","stopRecording","audioUri","formData","FormData","append","type","name","response","fetch","method","headers","authorization","body","ok","Error","data","json","upload_url","audioUrl","JSON","stringify","audio_url","language_code","transcriptId","id","completed","Promise","res","pollingRes","pollingData","text","toggleHotwordDetection","style","container","children","header","backButton","onPress","goBack","size","color","fileName","_jsxFileName","lineNumber","columnNumber","logoContainer","logoText","content","loadingIndicator","hotwordCard","statusIndicator","statusDot","backgroundColor","statusText","toggleButton","disabled","toggleButtonText","mainContent","iconContainer","waveformContainer","waveform","waveform1","waveform2","waveform3","title","description","transcriptContainer","transcriptLabel"],"sources":["C:/Users/PC/OneDrive/latest/SafeMitraLatest/screen/functional-part/HotwordDetectionScreen.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { \r\n  View, \r\n  TouchableOpacity, \r\n  SafeAreaView, \r\n  Text,\r\n  ActivityIndicator,\r\n  Alert\r\n} from 'react-native';\r\nimport { Ionicons } from '@expo/vector-icons';\r\nimport { useNavigation } from '@react-navigation/native';\r\nimport { Audio } from 'expo-av';\r\nimport * as FileSystem from 'expo-file-system';\r\nimport SafeMitraLogo from '../../components/SafeMitraLogo';\r\nimport styles from '../styles-part/HotwordDetectionScreenStyles';\r\n\r\n// AssemblyAI API key\r\nconst ASSEMBLY_API_KEY = '6582380b8a8e49cb81545a91e76c8960';\r\nconst HOTWORDS = ['sos', 'help', 'bachaao'];\r\nconst RECORDING_INTERVAL = 5000; // Record for 5 seconds at a time\r\n\r\nconst HotwordDetectionScreen = () => {\r\n  const navigation = useNavigation();\r\n  const [isListening, setIsListening] = useState(false);\r\n  const [recording, setRecording] = useState(null);\r\n  const [transcript, setTranscript] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const recordingRef = useRef(null);\r\n  const recordingIntervalRef = useRef(null);\r\n\r\n  // Add cleanup effect\r\n  useEffect(() => {\r\n    return () => {\r\n      if (recordingRef.current) {\r\n        recordingRef.current.stopAndUnloadAsync();\r\n        recordingRef.current = null;\r\n      }\r\n      if (recording) {\r\n        recording.stopAndUnloadAsync();\r\n      }\r\n      if (recordingIntervalRef.current) {\r\n        clearInterval(recordingIntervalRef.current);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  const sendSOSStatusToBackend = async (isActive) => {\r\n    try {\r\n      // Commented out backend integration for now\r\n      // const response = await fetch('YOUR_BACKEND_URL/api/sos-status', {\r\n      //   method: 'POST',\r\n      //   headers: {\r\n      //     'Content-Type': 'application/json',\r\n      //   },\r\n      //   body: JSON.stringify({\r\n      //     isActive,\r\n      //     timestamp: new Date().toISOString(),\r\n      //   }),\r\n      // });\r\n      \r\n      // if (!response.ok) {\r\n      //   throw new Error('Failed to update SOS status');\r\n      // }\r\n      \r\n      if (isActive) {\r\n        console.log('ðŸš¨ SOS TRIGGERED SUCCESSFULLY!');\r\n        Alert.alert('SOS Triggered', 'Emergency alert has been activated!');\r\n      } else {\r\n        console.log('SOS Status: Deactivated');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error updating SOS status:', error);\r\n    }\r\n  };\r\n\r\n  async function startRecording() {\r\n    try {\r\n      setIsLoading(true);\r\n      \r\n      // Clean up any existing recording\r\n      if (recordingRef.current) {\r\n        try {\r\n          await recordingRef.current.stopAndUnloadAsync();\r\n        } catch (err) {\r\n          console.log('Cleanup error:', err);\r\n        }\r\n        recordingRef.current = null;\r\n      }\r\n      if (recording) {\r\n        try {\r\n          await recording.stopAndUnloadAsync();\r\n        } catch (err) {\r\n          console.log('Cleanup error:', err);\r\n        }\r\n      }\r\n\r\n      const { status } = await Audio.requestPermissionsAsync();\r\n      if (status !== 'granted') {\r\n        Alert.alert('Permission Required', 'Please grant microphone permission to use this feature');\r\n        return;\r\n      }\r\n\r\n      await Audio.setAudioModeAsync({\r\n        allowsRecordingIOS: true,\r\n        playsInSilentModeIOS: true,\r\n      });\r\n\r\n      // Start continuous recording\r\n      const startContinuousRecording = async () => {\r\n        try {\r\n          const { recording } = await Audio.Recording.createAsync(\r\n            Audio.RecordingOptionsPresets.HIGH_QUALITY\r\n          );\r\n          recordingRef.current = recording;\r\n          setRecording(recording);\r\n          setIsListening(true);\r\n          console.log('Recording started');\r\n\r\n          // Stop and process after interval\r\n          setTimeout(async () => {\r\n            if (recordingRef.current) {\r\n              await processRecording();\r\n              // Add delay before starting new recording\r\n              setTimeout(() => {\r\n                if (isListening) {  // Only start new recording if still listening\r\n                  startContinuousRecording();\r\n                }\r\n              }, 2000);\r\n            }\r\n          }, RECORDING_INTERVAL);\r\n        } catch (err) {\r\n          console.error('Failed to start continuous recording:', err);\r\n          // Retry after delay\r\n          setTimeout(() => {\r\n            if (isListening) {  // Only retry if still listening\r\n              startContinuousRecording();\r\n            }\r\n          }, 3000);\r\n        }\r\n      };\r\n\r\n      startContinuousRecording();\r\n    } catch (err) {\r\n      console.error('Failed to start recording', err);\r\n      Alert.alert('Error', 'Failed to start recording');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }\r\n\r\n  async function processRecording() {\r\n    try {\r\n      if (!recordingRef.current) return;\r\n\r\n      const uri = recordingRef.current.getURI();\r\n      console.log('Processing recording from:', uri);\r\n\r\n      // Stop recording first\r\n      try {\r\n        await recordingRef.current.stopAndUnloadAsync();\r\n      } catch (err) {\r\n        console.log('Recording already stopped');\r\n      }\r\n\r\n      // Upload the audio file directly\r\n      const uploadUrl = await uploadToAssembly(uri);\r\n      if (!uploadUrl) {\r\n        console.log('Failed to get upload URL');\r\n        return;\r\n      }\r\n\r\n      const transcriptText = await transcribeWithAssembly(uploadUrl);\r\n      if (transcriptText) {\r\n        setTranscript(transcriptText);\r\n        console.log('Transcript:', transcriptText);\r\n\r\n        const matched = HOTWORDS.find(word =>\r\n          transcriptText.toLowerCase().includes(word)\r\n        );\r\n\r\n        if (matched) {\r\n          console.log('ðŸš¨ SOS Triggered: Hotword Detected â†’', matched);\r\n          await sendSOSStatusToBackend(true);\r\n          navigation.navigate('AutoAlertActive');\r\n        }\r\n      }\r\n    } catch (err) {\r\n      console.error('Error processing recording:', err);\r\n    }\r\n  }\r\n\r\n  async function stopRecording() {\r\n    try {\r\n      setIsLoading(true);\r\n      if (recordingRef.current) {\r\n        await recordingRef.current.stopAndUnloadAsync();\r\n        recordingRef.current = null;\r\n      }\r\n      if (recording) {\r\n        await recording.stopAndUnloadAsync();\r\n      }\r\n      await sendSOSStatusToBackend(false);\r\n    } catch (err) {\r\n      console.error('Error stopping recording:', err);\r\n    } finally {\r\n      setIsLoading(false);\r\n      setRecording(null);\r\n      setIsListening(false);\r\n    }\r\n  }\r\n\r\n  async function uploadToAssembly(audioUri) {\r\n    try {\r\n      // Create form data\r\n      const formData = new FormData();\r\n      formData.append('audio', {\r\n        uri: audioUri,\r\n        type: 'audio/m4a',\r\n        name: 'recording.m4a'\r\n      });\r\n\r\n      const response = await fetch('https://api.assemblyai.com/v2/upload', {\r\n        method: 'POST',\r\n        headers: {\r\n          authorization: ASSEMBLY_API_KEY,\r\n        },\r\n        body: formData\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Upload failed: ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      return data.upload_url;\r\n    } catch (error) {\r\n      console.error('Upload failed:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  async function transcribeWithAssembly(audioUrl) {\r\n    try {\r\n      const response = await fetch('https://api.assemblyai.com/v2/transcript', {\r\n        method: 'POST',\r\n        headers: {\r\n          authorization: ASSEMBLY_API_KEY,\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ \r\n          audio_url: audioUrl,\r\n          language_code: 'en' // or 'hi' for Hindi\r\n        }),\r\n      });\r\n\r\n      const data = await response.json();\r\n      const transcriptId = data.id;\r\n\r\n      // Poll for transcription result\r\n      let completed = false;\r\n      let transcriptText = '';\r\n      while (!completed) {\r\n        await new Promise(res => setTimeout(res, 1000));\r\n        const pollingRes = await fetch(\r\n          `https://api.assemblyai.com/v2/transcript/${transcriptId}`,\r\n          {\r\n            headers: { authorization: ASSEMBLY_API_KEY },\r\n          }\r\n        );\r\n        const pollingData = await pollingRes.json();\r\n        if (pollingData.status === 'completed') {\r\n          completed = true;\r\n          transcriptText = pollingData.text;\r\n        } else if (pollingData.status === 'error') {\r\n          throw new Error(pollingData.error);\r\n        }\r\n      }\r\n\r\n      return transcriptText;\r\n    } catch (error) {\r\n      console.error('Transcription failed:', error);\r\n      return '';\r\n    }\r\n  }\r\n\r\n  const toggleHotwordDetection = async () => {\r\n    if (isListening) {\r\n      await stopRecording();\r\n    } else {\r\n      await startRecording();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <SafeAreaView style={styles.container}>\r\n      {/* Header */}\r\n      <View style={styles.header}>\r\n        <TouchableOpacity \r\n          style={styles.backButton}\r\n          onPress={() => navigation.goBack()}>\r\n          <Ionicons name=\"arrow-back\" size={24} color=\"#FF3B30\" />\r\n        </TouchableOpacity>\r\n        <View style={styles.logoContainer}>\r\n          <SafeMitraLogo color=\"#FF3B30\" size={30} />\r\n          <Text style={styles.logoText}>SafeMitra</Text>\r\n        </View>\r\n      </View>\r\n\r\n      {/* Content */}\r\n      <View style={styles.content}>\r\n        {/* Loading Indicator */}\r\n        {isLoading && <ActivityIndicator size=\"large\" color=\"#FF3B30\" style={styles.loadingIndicator} />}\r\n\r\n        <View style={styles.hotwordCard}>\r\n          {/* Status Indicator */}\r\n          <View style={styles.statusIndicator}>\r\n            <View style={[\r\n              styles.statusDot,\r\n              { backgroundColor: isListening ? '#4CAF50' : '#FF3B30' }\r\n            ]} />\r\n            <Text style={styles.statusText}>\r\n              {isListening ? 'Status: Listening' : 'Status: Paused'}\r\n            </Text>\r\n            \r\n            {/* Toggle Button */}\r\n            <TouchableOpacity \r\n              style={styles.toggleButton}\r\n              onPress={toggleHotwordDetection}\r\n              disabled={isLoading}\r\n            >\r\n              <Text style={styles.toggleButtonText}>\r\n                {isListening ? 'Stop Recording' : 'Start Recording'}\r\n              </Text>\r\n            </TouchableOpacity>\r\n          </View>\r\n\r\n          {/* Main Content */}\r\n          <View style={styles.mainContent}>\r\n            {/* Icon */}\r\n            <View style={styles.iconContainer}>\r\n              <Ionicons name=\"mic\" size={40} color=\"#FF3B30\" />\r\n              <View style={styles.waveformContainer}>\r\n                <View style={[styles.waveform, styles.waveform1]} />\r\n                <View style={[styles.waveform, styles.waveform2]} />\r\n                <View style={[styles.waveform, styles.waveform3]} />\r\n              </View>\r\n            </View>\r\n\r\n            {/* Title */}\r\n            <Text style={styles.title}>Voice Hotword Detection</Text>\r\n\r\n            {/* Description */}\r\n            <Text style={styles.description}>\r\n              SafeMitra is listening for emergency keywords: \"SOS\", \"Help\", \"Bachaao\"\r\n            </Text>\r\n\r\n            {/* Transcript Display */}\r\n            {transcript ? (\r\n              <View style={styles.transcriptContainer}>\r\n                <Text style={styles.transcriptLabel}>Last Transcript:</Text>\r\n                <Text style={styles.transcriptText}>{transcript}</Text>\r\n              </View>\r\n            ) : null}\r\n          </View>\r\n        </View>\r\n      </View>\r\n    </SafeAreaView>\r\n  );\r\n};\r\n\r\nexport default HotwordDetectionScreen; \r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}