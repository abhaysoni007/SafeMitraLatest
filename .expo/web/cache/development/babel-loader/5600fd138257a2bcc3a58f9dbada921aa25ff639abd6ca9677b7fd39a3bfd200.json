{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PC\\\\OneDrive\\\\latest\\\\SafeMitraLatest\\\\screen\\\\functional-part\\\\HotwordDetectionScreen.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { Ionicons } from '@expo/vector-icons';\nimport { useNavigation } from '@react-navigation/native';\nimport { Audio } from 'expo-av';\nimport * as FileSystem from 'expo-file-system';\nimport NetInfo from '@react-native-community/netinfo';\nimport SafeMitraLogo from '../../components/SafeMitraLogo';\nimport styles from '../styles-part/HotwordDetectionScreenStyles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ASSEMBLY_API_KEY = '6582380b8a8e49cb81545a91e76c8960';\nconst HOTWORDS = ['sos', 'help', 'bachaao'];\nconst COOLDOWN_PERIOD = 15000;\nconst MAX_RETRY_ATTEMPTS = 5;\nconst INITIAL_RETRY_DELAY = 1000;\nconst HotwordDetectionScreen = () => {\n  const navigation = useNavigation();\n  const [isListening, setIsListening] = useState(false);\n  const [recording, setRecording] = useState(null);\n  const [transcript, setTranscript] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [isOnline, setIsOnline] = useState(true);\n  const [pendingRecordings, setPendingRecordings] = useState([]);\n  const recordingRef = useRef(null);\n  const isRecordingRef = useRef(false);\n  const processingRef = useRef(false);\n  const lastTriggeredRef = useRef(0);\n  const debounceTimeoutRef = useRef(null);\n  const retryCountRef = useRef(0);\n  useEffect(() => {\n    const checkConnectivity = async () => {\n      try {\n        const netInfo = await NetInfo.fetch();\n        setIsOnline(Boolean(netInfo.isConnected));\n        if (netInfo.isConnected && pendingRecordings.length > 0) {\n          processPendingRecordings();\n        }\n      } catch (error) {\n        console.log('Network check failed:', error);\n        setIsOnline(false);\n      }\n    };\n    checkConnectivity();\n    const unsubscribe = NetInfo.addEventListener(state => {\n      setIsOnline(Boolean(state.isConnected));\n      if (state.isConnected && pendingRecordings.length > 0) {\n        processPendingRecordings();\n      }\n    });\n    return () => {\n      unsubscribe();\n      stopRecording();\n      Audio.setAudioModeAsync({\n        allowsRecordingIOS: false,\n        playsInSilentModeIOS: false\n      });\n      if (debounceTimeoutRef.current) {\n        clearTimeout(debounceTimeoutRef.current);\n      }\n    };\n  }, [pendingRecordings]);\n  const processPendingRecordings = async () => {\n    for (const recording of pendingRecordings) {\n      try {\n        await processRecording(recording.uri);\n        setPendingRecordings(prev => prev.filter(r => r.uri !== recording.uri));\n      } catch (error) {\n        console.error('Error processing pending recording:', error);\n      }\n    }\n  };\n  const handleSOSStatus = isActive => {\n    const now = Date.now();\n    if (isActive && now - lastTriggeredRef.current < COOLDOWN_PERIOD) {\n      console.log('SOS trigger on cooldown');\n      return;\n    }\n    lastTriggeredRef.current = now;\n    if (isActive) {\n      console.log('ðŸš¨ SOS TRIGGERED SUCCESSFULLY!');\n      Alert.alert('SOS Triggered', 'Emergency alert has been activated!', [{\n        text: 'OK',\n        onPress: () => navigation.navigate('AutoAlertActive')\n      }]);\n    } else {\n      console.log('SOS Status: Deactivated');\n      Alert.alert('SOS Deactivated', 'Emergency alert has been stopped.');\n    }\n  };\n  async function startRecording() {\n    try {\n      if (isRecordingRef.current || processingRef.current) {\n        console.log('Recording or processing already in progress');\n        return;\n      }\n      if (!isOnline) {\n        Alert.alert('No Internet Connection', 'Recording will be stored and processed when online.');\n      }\n      setIsLoading(true);\n      const {\n        status\n      } = await Audio.requestPermissionsAsync();\n      if (status !== 'granted') {\n        Alert.alert('Permission Required', 'Please grant microphone permission to use this feature');\n        return;\n      }\n      await Audio.setAudioModeAsync({\n        allowsRecordingIOS: true,\n        playsInSilentModeIOS: true,\n        staysActiveInBackground: true,\n        interruptionModeIOS: Audio.INTERRUPTION_MODE_IOS_DO_NOT_MIX,\n        interruptionModeAndroid: Audio.INTERRUPTION_MODE_ANDROID_DO_NOT_MIX,\n        shouldDuckAndroid: true,\n        playThroughEarpieceAndroid: false\n      });\n      const {\n        recording\n      } = await Audio.Recording.createAsync(Audio.RecordingOptionsPresets.HIGH_QUALITY);\n      recordingRef.current = recording;\n      setRecording(recording);\n      setIsListening(true);\n      isRecordingRef.current = true;\n      console.log('Recording started');\n      setTimeout(async () => {\n        if (isRecordingRef.current) {\n          await processRecording();\n        }\n      }, 5000);\n    } catch (err) {\n      console.error('Failed to start recording:', err);\n      Alert.alert('Error', 'Failed to start recording');\n    } finally {\n      setIsLoading(false);\n    }\n  }\n  async function stopRecording() {\n    try {\n      setIsLoading(true);\n      isRecordingRef.current = false;\n      processingRef.current = false;\n      if (recordingRef.current) {\n        await recordingRef.current.stopAndUnloadAsync();\n        recordingRef.current = null;\n      }\n      if (recording) {\n        await recording.stopAndUnloadAsync();\n      }\n      handleSOSStatus(false);\n    } catch (err) {\n      console.error('Error stopping recording:', err);\n    } finally {\n      setIsLoading(false);\n      setRecording(null);\n      setIsListening(false);\n    }\n  }\n  async function processRecording(uri = null) {\n    if (processingRef.current) {\n      console.log('Already processing a recording');\n      return;\n    }\n    try {\n      processingRef.current = true;\n      if (!recordingRef.current && !uri) {\n        processingRef.current = false;\n        return;\n      }\n      const recordingUri = uri || recordingRef.current.getURI();\n      console.log('Processing recording from:', recordingUri);\n      if (!isOnline) {\n        const pendingPath = `${FileSystem.documentDirectory}pending_recording_${Date.now()}.m4a`;\n        await FileSystem.copyAsync({\n          from: recordingUri,\n          to: pendingPath\n        });\n        setPendingRecordings(prev => [...prev, {\n          uri: pendingPath,\n          timestamp: Date.now()\n        }]);\n        processingRef.current = false;\n        return;\n      }\n      if (recordingRef.current) {\n        await recordingRef.current.stopAndUnloadAsync();\n        isRecordingRef.current = false;\n      }\n      const formData = new FormData();\n      formData.append('audio', {\n        uri: Platform.OS === 'ios' ? recordingUri.replace('file://', '') : recordingUri,\n        type: 'audio/m4a',\n        name: 'recording.m4a'\n      });\n      let uploadResponse;\n      retryCountRef.current = 0;\n      while (retryCountRef.current < MAX_RETRY_ATTEMPTS) {\n        try {\n          uploadResponse = await fetch('https://api.assemblyai.com/v2/upload', {\n            method: 'POST',\n            headers: {\n              authorization: ASSEMBLY_API_KEY\n            },\n            body: formData\n          });\n          break;\n        } catch (error) {\n          retryCountRef.current++;\n          if (retryCountRef.current === MAX_RETRY_ATTEMPTS) throw error;\n          await new Promise(resolve => setTimeout(resolve, INITIAL_RETRY_DELAY * Math.pow(2, retryCountRef.current)));\n        }\n      }\n      if (!uploadResponse.ok) {\n        throw new Error('Upload failed');\n      }\n      const {\n        upload_url\n      } = await uploadResponse.json();\n      let transcriptResponse;\n      retryCountRef.current = 0;\n      while (retryCountRef.current < MAX_RETRY_ATTEMPTS) {\n        try {\n          transcriptResponse = await fetch('https://api.assemblyai.com/v2/transcript', {\n            method: 'POST',\n            headers: {\n              authorization: ASSEMBLY_API_KEY,\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              audio_url: upload_url,\n              language_code: 'en'\n            })\n          });\n          break;\n        } catch (error) {\n          retryCountRef.current++;\n          if (retryCountRef.current === MAX_RETRY_ATTEMPTS) throw error;\n          await new Promise(resolve => setTimeout(resolve, INITIAL_RETRY_DELAY * Math.pow(2, retryCountRef.current)));\n        }\n      }\n      const {\n        id\n      } = await transcriptResponse.json();\n      let transcriptText = '';\n      let attempts = 0;\n      const maxAttempts = 10;\n      while (attempts < maxAttempts) {\n        await new Promise(resolve => setTimeout(resolve, INITIAL_RETRY_DELAY * Math.pow(2, attempts)));\n        const resultResponse = await fetch(`https://api.assemblyai.com/v2/transcript/${id}`, {\n          headers: {\n            authorization: ASSEMBLY_API_KEY\n          }\n        });\n        const result = await resultResponse.json();\n        if (result.status === 'completed') {\n          transcriptText = result.text;\n          break;\n        } else if (result.status === 'error') {\n          throw new Error(result.error);\n        }\n        attempts++;\n      }\n      if (transcriptText) {\n        const transcriptPath = `${FileSystem.documentDirectory}transcript_${Date.now()}.txt`;\n        await FileSystem.writeAsStringAsync(transcriptPath, transcriptText);\n        console.log('Transcript saved to:', transcriptPath);\n        setTranscript(transcriptText);\n        console.log('Transcript:', transcriptText);\n        const matched = HOTWORDS.find(word => transcriptText.toLowerCase().includes(word));\n        if (matched) {\n          console.log('ðŸš¨ SOS Triggered: Hotword Detected â†’', matched);\n          handleSOSStatus(true);\n        }\n      }\n      if (!isRecordingRef.current) {\n        startRecording();\n      }\n    } catch (err) {\n      console.error('Error processing recording:', err);\n      if (err.message.includes('timeout')) {\n        Alert.alert('Connection Timeout', 'Please check your internet connection and try again.');\n      }\n    } finally {\n      processingRef.current = false;\n      retryCountRef.current = 0;\n    }\n  }\n  const toggleHotwordDetection = async () => {\n    if (debounceTimeoutRef.current) return;\n    debounceTimeoutRef.current = setTimeout(() => {\n      debounceTimeoutRef.current = null;\n    }, 2000);\n    if (isListening) {\n      await stopRecording();\n    } else {\n      await startRecording();\n    }\n  };\n  return _jsxDEV(SafeAreaView, {\n    style: styles.container,\n    children: [_jsxDEV(View, {\n      style: styles.header,\n      children: [_jsxDEV(TouchableOpacity, {\n        style: styles.backButton,\n        onPress: () => navigation.goBack(),\n        children: _jsxDEV(Ionicons, {\n          name: \"arrow-back\",\n          size: 24,\n          color: \"#FF3B30\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 380,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 9\n      }, this), _jsxDEV(View, {\n        style: styles.logoContainer,\n        children: [_jsxDEV(SafeMitraLogo, {\n          color: \"#FF3B30\",\n          size: 30\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 383,\n          columnNumber: 11\n        }, this), _jsxDEV(Text, {\n          style: styles.logoText,\n          children: \"SafeMitra\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 384,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 382,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 376,\n      columnNumber: 7\n    }, this), _jsxDEV(View, {\n      style: styles.content,\n      children: [isLoading && _jsxDEV(ActivityIndicator, {\n        size: \"large\",\n        color: \"#FF3B30\",\n        style: styles.loadingIndicator\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 389,\n        columnNumber: 23\n      }, this), _jsxDEV(View, {\n        style: styles.hotwordCard,\n        children: [_jsxDEV(View, {\n          style: styles.statusIndicator,\n          children: [_jsxDEV(View, {\n            style: [styles.statusDot, {\n              backgroundColor: isListening ? '#4CAF50' : '#FF3B30'\n            }]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 393,\n            columnNumber: 13\n          }, this), _jsxDEV(Text, {\n            style: styles.statusText,\n            children: isListening ? 'Status: Listening' : 'Status: Paused'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 397,\n            columnNumber: 13\n          }, this), _jsxDEV(TouchableOpacity, {\n            style: styles.toggleButton,\n            onPress: toggleHotwordDetection,\n            disabled: isLoading || Boolean(debounceTimeoutRef.current),\n            children: _jsxDEV(Text, {\n              style: styles.toggleButtonText,\n              children: isListening ? 'Stop Recording' : 'Start Recording'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 406,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 401,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 392,\n          columnNumber: 11\n        }, this), _jsxDEV(View, {\n          style: styles.mainContent,\n          children: [_jsxDEV(View, {\n            style: styles.iconContainer,\n            children: [_jsxDEV(Ionicons, {\n              name: \"mic\",\n              size: 40,\n              color: \"#FF3B30\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 414,\n              columnNumber: 15\n            }, this), _jsxDEV(View, {\n              style: styles.waveformContainer,\n              children: [_jsxDEV(View, {\n                style: [styles.waveform, styles.waveform1]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 416,\n                columnNumber: 17\n              }, this), _jsxDEV(View, {\n                style: [styles.waveform, styles.waveform2]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 417,\n                columnNumber: 17\n              }, this), _jsxDEV(View, {\n                style: [styles.waveform, styles.waveform3]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 418,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 415,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 413,\n            columnNumber: 13\n          }, this), _jsxDEV(Text, {\n            style: styles.title,\n            children: \"Voice Hotword Detection\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 422,\n            columnNumber: 13\n          }, this), _jsxDEV(Text, {\n            style: styles.description,\n            children: \"SafeMitra is listening for emergency keywords: \\\"SOS\\\", \\\"Help\\\", \\\"Bachaao\\\"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 423,\n            columnNumber: 13\n          }, this), !isOnline && _jsxDEV(Text, {\n            style: [styles.description, {\n              color: '#FF3B30'\n            }],\n            children: \"No internet connection. Recordings will be processed when online.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 428,\n            columnNumber: 15\n          }, this), pendingRecordings.length > 0 && _jsxDEV(Text, {\n            style: [styles.description, {\n              color: '#FFA500'\n            }],\n            children: [pendingRecordings.length, \" recording(s) waiting to be processed\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 434,\n            columnNumber: 15\n          }, this), transcript ? _jsxDEV(View, {\n            style: styles.transcriptContainer,\n            children: [_jsxDEV(Text, {\n              style: styles.transcriptLabel,\n              children: \"Last Transcript:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 441,\n              columnNumber: 17\n            }, this), _jsxDEV(Text, {\n              numberOfLines: 3,\n              ellipsizeMode: \"tail\",\n              style: styles.transcriptText,\n              children: transcript\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 442,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 440,\n            columnNumber: 15\n          }, this) : null]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 412,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 388,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 375,\n    columnNumber: 5\n  }, this);\n};\nexport default HotwordDetectionScreen;","map":{"version":3,"names":["React","useState","useEffect","useRef","View","TouchableOpacity","SafeAreaView","Text","ActivityIndicator","Alert","Platform","Ionicons","useNavigation","Audio","FileSystem","NetInfo","SafeMitraLogo","styles","jsxDEV","_jsxDEV","ASSEMBLY_API_KEY","HOTWORDS","COOLDOWN_PERIOD","MAX_RETRY_ATTEMPTS","INITIAL_RETRY_DELAY","HotwordDetectionScreen","navigation","isListening","setIsListening","recording","setRecording","transcript","setTranscript","isLoading","setIsLoading","isOnline","setIsOnline","pendingRecordings","setPendingRecordings","recordingRef","isRecordingRef","processingRef","lastTriggeredRef","debounceTimeoutRef","retryCountRef","checkConnectivity","netInfo","fetch","Boolean","isConnected","length","processPendingRecordings","error","console","log","unsubscribe","addEventListener","state","stopRecording","setAudioModeAsync","allowsRecordingIOS","playsInSilentModeIOS","current","clearTimeout","processRecording","uri","prev","filter","r","handleSOSStatus","isActive","now","Date","alert","text","onPress","navigate","startRecording","status","requestPermissionsAsync","staysActiveInBackground","interruptionModeIOS","INTERRUPTION_MODE_IOS_DO_NOT_MIX","interruptionModeAndroid","INTERRUPTION_MODE_ANDROID_DO_NOT_MIX","shouldDuckAndroid","playThroughEarpieceAndroid","Recording","createAsync","RecordingOptionsPresets","HIGH_QUALITY","setTimeout","err","stopAndUnloadAsync","recordingUri","getURI","pendingPath","documentDirectory","copyAsync","from","to","timestamp","formData","FormData","append","OS","replace","type","name","uploadResponse","method","headers","authorization","body","Promise","resolve","Math","pow","ok","Error","upload_url","json","transcriptResponse","JSON","stringify","audio_url","language_code","id","transcriptText","attempts","maxAttempts","resultResponse","result","transcriptPath","writeAsStringAsync","matched","find","word","toLowerCase","includes","message","toggleHotwordDetection","style","container","children","header","backButton","goBack","size","color","fileName","_jsxFileName","lineNumber","columnNumber","logoContainer","logoText","content","loadingIndicator","hotwordCard","statusIndicator","statusDot","backgroundColor","statusText","toggleButton","disabled","toggleButtonText","mainContent","iconContainer","waveformContainer","waveform","waveform1","waveform2","waveform3","title","description","transcriptContainer","transcriptLabel","numberOfLines","ellipsizeMode"],"sources":["C:/Users/PC/OneDrive/latest/SafeMitraLatest/screen/functional-part/HotwordDetectionScreen.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { \r\n  View, \r\n  TouchableOpacity, \r\n  SafeAreaView, \r\n  Text,\r\n  ActivityIndicator,\r\n  Alert,\r\n  Platform\r\n} from 'react-native';\r\nimport { Ionicons } from '@expo/vector-icons';\r\nimport { useNavigation } from '@react-navigation/native';\r\nimport { Audio } from 'expo-av';\r\nimport * as FileSystem from 'expo-file-system';\r\nimport NetInfo from '@react-native-community/netinfo';\r\nimport SafeMitraLogo from '../../components/SafeMitraLogo';\r\nimport styles from '../styles-part/HotwordDetectionScreenStyles';\r\n\r\n// TODO: Move to secure storage or environment variables\r\nconst ASSEMBLY_API_KEY = '6582380b8a8e49cb81545a91e76c8960';\r\nconst HOTWORDS = ['sos', 'help', 'bachaao'];\r\nconst COOLDOWN_PERIOD = 15000; // 15 seconds cooldown between triggers\r\nconst MAX_RETRY_ATTEMPTS = 5;\r\nconst INITIAL_RETRY_DELAY = 1000; // 1 second\r\n\r\nconst HotwordDetectionScreen = () => {\r\n  const navigation = useNavigation();\r\n  const [isListening, setIsListening] = useState(false);\r\n  const [recording, setRecording] = useState(null);\r\n  const [transcript, setTranscript] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isOnline, setIsOnline] = useState(true);\r\n  const [pendingRecordings, setPendingRecordings] = useState([]);\r\n  \r\n  // Refs for state management\r\n  const recordingRef = useRef(null);\r\n  const isRecordingRef = useRef(false);\r\n  const processingRef = useRef(false);\r\n  const lastTriggeredRef = useRef(0);\r\n  const debounceTimeoutRef = useRef(null);\r\n  const retryCountRef = useRef(0);\r\n\r\n  useEffect(() => {\r\n    // Check network connectivity\r\n    const checkConnectivity = async () => {\r\n      try {\r\n        const netInfo = await NetInfo.fetch();\r\n        setIsOnline(Boolean(netInfo.isConnected));\r\n        if (netInfo.isConnected && pendingRecordings.length > 0) {\r\n          processPendingRecordings();\r\n        }\r\n      } catch (error) {\r\n        console.log('Network check failed:', error);\r\n        setIsOnline(false);\r\n      }\r\n    };\r\n\r\n    checkConnectivity();\r\n    const unsubscribe = NetInfo.addEventListener(state => {\r\n      setIsOnline(Boolean(state.isConnected));\r\n      if (state.isConnected && pendingRecordings.length > 0) {\r\n        processPendingRecordings();\r\n      }\r\n    });\r\n\r\n    // Cleanup function\r\n    return () => {\r\n      unsubscribe();\r\n      stopRecording();\r\n      Audio.setAudioModeAsync({ \r\n        allowsRecordingIOS: false,\r\n        playsInSilentModeIOS: false \r\n      });\r\n      if (debounceTimeoutRef.current) {\r\n        clearTimeout(debounceTimeoutRef.current);\r\n      }\r\n    };\r\n  }, [pendingRecordings]);\r\n\r\n  const processPendingRecordings = async () => {\r\n    for (const recording of pendingRecordings) {\r\n      try {\r\n        await processRecording(recording.uri);\r\n        // Remove processed recording from pending list\r\n        setPendingRecordings(prev => prev.filter(r => r.uri !== recording.uri));\r\n      } catch (error) {\r\n        console.error('Error processing pending recording:', error);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleSOSStatus = (isActive) => {\r\n    const now = Date.now();\r\n    if (isActive && now - lastTriggeredRef.current < COOLDOWN_PERIOD) {\r\n      console.log('SOS trigger on cooldown');\r\n      return;\r\n    }\r\n    \r\n    lastTriggeredRef.current = now;\r\n    \r\n    if (isActive) {\r\n      console.log('ðŸš¨ SOS TRIGGERED SUCCESSFULLY!');\r\n      Alert.alert(\r\n        'SOS Triggered',\r\n        'Emergency alert has been activated!',\r\n        [\r\n          {\r\n            text: 'OK',\r\n            onPress: () => navigation.navigate('AutoAlertActive')\r\n          }\r\n        ]\r\n      );\r\n    } else {\r\n      console.log('SOS Status: Deactivated');\r\n      Alert.alert('SOS Deactivated', 'Emergency alert has been stopped.');\r\n    }\r\n  };\r\n\r\n  async function startRecording() {\r\n    try {\r\n      if (isRecordingRef.current || processingRef.current) {\r\n        console.log('Recording or processing already in progress');\r\n        return;\r\n      }\r\n      \r\n      if (!isOnline) {\r\n        Alert.alert(\r\n          'No Internet Connection',\r\n          'Recording will be stored and processed when online.'\r\n        );\r\n      }\r\n\r\n      setIsLoading(true);\r\n      const { status } = await Audio.requestPermissionsAsync();\r\n      if (status !== 'granted') {\r\n        Alert.alert('Permission Required', 'Please grant microphone permission to use this feature');\r\n        return;\r\n      }\r\n\r\n      await Audio.setAudioModeAsync({\r\n        allowsRecordingIOS: true,\r\n        playsInSilentModeIOS: true,\r\n        staysActiveInBackground: true,\r\n        interruptionModeIOS: Audio.INTERRUPTION_MODE_IOS_DO_NOT_MIX,\r\n        interruptionModeAndroid: Audio.INTERRUPTION_MODE_ANDROID_DO_NOT_MIX,\r\n        shouldDuckAndroid: true,\r\n        playThroughEarpieceAndroid: false\r\n      });\r\n\r\n      const { recording } = await Audio.Recording.createAsync(\r\n        Audio.RecordingOptionsPresets.HIGH_QUALITY\r\n      );\r\n      \r\n      recordingRef.current = recording;\r\n      setRecording(recording);\r\n      setIsListening(true);\r\n      isRecordingRef.current = true;\r\n      console.log('Recording started');\r\n\r\n      // Process recording after 5 seconds\r\n      setTimeout(async () => {\r\n        if (isRecordingRef.current) {\r\n          await processRecording();\r\n        }\r\n      }, 5000);\r\n\r\n    } catch (err) {\r\n      console.error('Failed to start recording:', err);\r\n      Alert.alert('Error', 'Failed to start recording');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }\r\n\r\n  async function stopRecording() {\r\n    try {\r\n      setIsLoading(true);\r\n      isRecordingRef.current = false;\r\n      processingRef.current = false;\r\n      \r\n      if (recordingRef.current) {\r\n        await recordingRef.current.stopAndUnloadAsync();\r\n        recordingRef.current = null;\r\n      }\r\n      if (recording) {\r\n        await recording.stopAndUnloadAsync();\r\n      }\r\n      \r\n      handleSOSStatus(false);\r\n    } catch (err) {\r\n      console.error('Error stopping recording:', err);\r\n    } finally {\r\n      setIsLoading(false);\r\n      setRecording(null);\r\n      setIsListening(false);\r\n    }\r\n  }\r\n\r\n  async function processRecording(uri = null) {\r\n    if (processingRef.current) {\r\n      console.log('Already processing a recording');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      processingRef.current = true;\r\n      \r\n      if (!recordingRef.current && !uri) {\r\n        processingRef.current = false;\r\n        return;\r\n      }\r\n\r\n      const recordingUri = uri || recordingRef.current.getURI();\r\n      console.log('Processing recording from:', recordingUri);\r\n\r\n      if (!isOnline) {\r\n        // Store recording for later processing\r\n        const pendingPath = `${FileSystem.documentDirectory}pending_recording_${Date.now()}.m4a`;\r\n        await FileSystem.copyAsync({ from: recordingUri, to: pendingPath });\r\n        setPendingRecordings(prev => [...prev, { uri: pendingPath, timestamp: Date.now() }]);\r\n        processingRef.current = false;\r\n        return;\r\n      }\r\n\r\n      // Stop current recording before processing\r\n      if (recordingRef.current) {\r\n        await recordingRef.current.stopAndUnloadAsync();\r\n        isRecordingRef.current = false;\r\n      }\r\n\r\n      // Create form data\r\n      const formData = new FormData();\r\n      formData.append('audio', {\r\n        uri: Platform.OS === 'ios' ? recordingUri.replace('file://', '') : recordingUri,\r\n        type: 'audio/m4a',\r\n        name: 'recording.m4a'\r\n      });\r\n\r\n      // Upload to AssemblyAI with exponential backoff\r\n      let uploadResponse;\r\n      retryCountRef.current = 0;\r\n      \r\n      while (retryCountRef.current < MAX_RETRY_ATTEMPTS) {\r\n        try {\r\n          uploadResponse = await fetch('https://api.assemblyai.com/v2/upload', {\r\n            method: 'POST',\r\n            headers: {\r\n              authorization: ASSEMBLY_API_KEY,\r\n            },\r\n            body: formData\r\n          });\r\n          break;\r\n        } catch (error) {\r\n          retryCountRef.current++;\r\n          if (retryCountRef.current === MAX_RETRY_ATTEMPTS) throw error;\r\n          await new Promise(resolve => \r\n            setTimeout(resolve, INITIAL_RETRY_DELAY * Math.pow(2, retryCountRef.current))\r\n          );\r\n        }\r\n      }\r\n\r\n      if (!uploadResponse.ok) {\r\n        throw new Error('Upload failed');\r\n      }\r\n\r\n      const { upload_url } = await uploadResponse.json();\r\n\r\n      // Transcribe with exponential backoff\r\n      let transcriptResponse;\r\n      retryCountRef.current = 0;\r\n      \r\n      while (retryCountRef.current < MAX_RETRY_ATTEMPTS) {\r\n        try {\r\n          transcriptResponse = await fetch('https://api.assemblyai.com/v2/transcript', {\r\n            method: 'POST',\r\n            headers: {\r\n              authorization: ASSEMBLY_API_KEY,\r\n              'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({ \r\n              audio_url: upload_url,\r\n              language_code: 'en'\r\n            }),\r\n          });\r\n          break;\r\n        } catch (error) {\r\n          retryCountRef.current++;\r\n          if (retryCountRef.current === MAX_RETRY_ATTEMPTS) throw error;\r\n          await new Promise(resolve => \r\n            setTimeout(resolve, INITIAL_RETRY_DELAY * Math.pow(2, retryCountRef.current))\r\n          );\r\n        }\r\n      }\r\n\r\n      const { id } = await transcriptResponse.json();\r\n\r\n      // Poll for results with exponential backoff\r\n      let transcriptText = '';\r\n      let attempts = 0;\r\n      const maxAttempts = 10;\r\n\r\n      while (attempts < maxAttempts) {\r\n        await new Promise(resolve => \r\n          setTimeout(resolve, INITIAL_RETRY_DELAY * Math.pow(2, attempts))\r\n        );\r\n        \r\n        const resultResponse = await fetch(\r\n          `https://api.assemblyai.com/v2/transcript/${id}`,\r\n          {\r\n            headers: { authorization: ASSEMBLY_API_KEY },\r\n          }\r\n        );\r\n        const result = await resultResponse.json();\r\n        \r\n        if (result.status === 'completed') {\r\n          transcriptText = result.text;\r\n          break;\r\n        } else if (result.status === 'error') {\r\n          throw new Error(result.error);\r\n        }\r\n        attempts++;\r\n      }\r\n\r\n      if (transcriptText) {\r\n        // Save transcript to text file\r\n        const transcriptPath = `${FileSystem.documentDirectory}transcript_${Date.now()}.txt`;\r\n        await FileSystem.writeAsStringAsync(transcriptPath, transcriptText);\r\n        console.log('Transcript saved to:', transcriptPath);\r\n\r\n        setTranscript(transcriptText);\r\n        console.log('Transcript:', transcriptText);\r\n\r\n        // Check for hotwords\r\n        const matched = HOTWORDS.find(word =>\r\n          transcriptText.toLowerCase().includes(word)\r\n        );\r\n\r\n        if (matched) {\r\n          console.log('ðŸš¨ SOS Triggered: Hotword Detected â†’', matched);\r\n          handleSOSStatus(true);\r\n        }\r\n      }\r\n\r\n      // Start new recording after processing\r\n      if (!isRecordingRef.current) {\r\n        startRecording();\r\n      }\r\n\r\n    } catch (err) {\r\n      console.error('Error processing recording:', err);\r\n      if (err.message.includes('timeout')) {\r\n        Alert.alert('Connection Timeout', 'Please check your internet connection and try again.');\r\n      }\r\n    } finally {\r\n      processingRef.current = false;\r\n      retryCountRef.current = 0;\r\n    }\r\n  }\r\n\r\n  const toggleHotwordDetection = async () => {\r\n    if (debounceTimeoutRef.current) return;\r\n    \r\n    debounceTimeoutRef.current = setTimeout(() => {\r\n      debounceTimeoutRef.current = null;\r\n    }, 2000);\r\n\r\n    if (isListening) {\r\n      await stopRecording();\r\n    } else {\r\n      await startRecording();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <SafeAreaView style={styles.container}>\r\n      <View style={styles.header}>\r\n        <TouchableOpacity \r\n          style={styles.backButton}\r\n          onPress={() => navigation.goBack()}>\r\n          <Ionicons name=\"arrow-back\" size={24} color=\"#FF3B30\" />\r\n        </TouchableOpacity>\r\n        <View style={styles.logoContainer}>\r\n          <SafeMitraLogo color=\"#FF3B30\" size={30} />\r\n          <Text style={styles.logoText}>SafeMitra</Text>\r\n        </View>\r\n      </View>\r\n\r\n      <View style={styles.content}>\r\n        {isLoading && <ActivityIndicator size=\"large\" color=\"#FF3B30\" style={styles.loadingIndicator} />}\r\n\r\n        <View style={styles.hotwordCard}>\r\n          <View style={styles.statusIndicator}>\r\n            <View style={[\r\n              styles.statusDot,\r\n              { backgroundColor: isListening ? '#4CAF50' : '#FF3B30' }\r\n            ]} />\r\n            <Text style={styles.statusText}>\r\n              {isListening ? 'Status: Listening' : 'Status: Paused'}\r\n            </Text>\r\n            \r\n            <TouchableOpacity \r\n              style={styles.toggleButton}\r\n              onPress={toggleHotwordDetection}\r\n              disabled={isLoading || Boolean(debounceTimeoutRef.current)}\r\n            >\r\n              <Text style={styles.toggleButtonText}>\r\n                {isListening ? 'Stop Recording' : 'Start Recording'}\r\n              </Text>\r\n            </TouchableOpacity>\r\n          </View>\r\n\r\n          <View style={styles.mainContent}>\r\n            <View style={styles.iconContainer}>\r\n              <Ionicons name=\"mic\" size={40} color=\"#FF3B30\" />\r\n              <View style={styles.waveformContainer}>\r\n                <View style={[styles.waveform, styles.waveform1]} />\r\n                <View style={[styles.waveform, styles.waveform2]} />\r\n                <View style={[styles.waveform, styles.waveform3]} />\r\n              </View>\r\n            </View>\r\n\r\n            <Text style={styles.title}>Voice Hotword Detection</Text>\r\n            <Text style={styles.description}>\r\n              SafeMitra is listening for emergency keywords: \"SOS\", \"Help\", \"Bachaao\"\r\n            </Text>\r\n\r\n            {!isOnline && (\r\n              <Text style={[styles.description, { color: '#FF3B30' }]}>\r\n                No internet connection. Recordings will be processed when online.\r\n              </Text>\r\n            )}\r\n\r\n            {pendingRecordings.length > 0 && (\r\n              <Text style={[styles.description, { color: '#FFA500' }]}>\r\n                {pendingRecordings.length} recording(s) waiting to be processed\r\n              </Text>\r\n            )}\r\n\r\n            {transcript ? (\r\n              <View style={styles.transcriptContainer}>\r\n                <Text style={styles.transcriptLabel}>Last Transcript:</Text>\r\n                <Text \r\n                  numberOfLines={3} \r\n                  ellipsizeMode=\"tail\" \r\n                  style={styles.transcriptText}\r\n                >\r\n                  {transcript}\r\n                </Text>\r\n              </View>\r\n            ) : null}\r\n          </View>\r\n        </View>\r\n      </View>\r\n    </SafeAreaView>\r\n  );\r\n};\r\n\r\nexport default HotwordDetectionScreen; \r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}