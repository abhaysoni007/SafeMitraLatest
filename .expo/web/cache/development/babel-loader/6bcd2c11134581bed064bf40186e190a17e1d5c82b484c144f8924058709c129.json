{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PC\\\\OneDrive\\\\latest\\\\SafeMitraLatest\\\\screen\\\\functional-part\\\\SplashScreens.js\";\nimport React, { useEffect, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { styles } from '../styles-part/SplashScreenStyles';\nimport SafeMitraLogo from '../../components/SafeMitraLogo';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SplashScreen = ({\n  navigation\n}) => {\n  const handleGetStarted = () => {\n    navigation.navigate('MobileRegistration');\n  };\n  return _jsxDEV(View, {\n    style: styles.container,\n    children: [_jsxDEV(View, {\n      style: styles.contentContainer,\n      children: [_jsxDEV(SafeMitraLogo, {\n        color: \"#FFFFFF\",\n        size: 150\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), _jsxDEV(Text, {\n        style: styles.title,\n        children: \"Safety First\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), _jsxDEV(Text, {\n        style: styles.subtitle,\n        children: \"Your Safety, Our Priority\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), _jsxDEV(TouchableOpacity, {\n      style: styles.button,\n      onPress: handleGetStarted,\n      activeOpacity: 0.8,\n      disabled: false,\n      children: _jsxDEV(Text, {\n        style: styles.buttonText,\n        children: \"Get Started\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\nexport default SplashScreen;","map":{"version":3,"names":["React","useEffect","useState","View","Text","TouchableOpacity","ActivityIndicator","Alert","styles","SafeMitraLogo","jsxDEV","_jsxDEV","SplashScreen","navigation","handleGetStarted","navigate","style","container","children","contentContainer","color","size","fileName","_jsxFileName","lineNumber","columnNumber","title","subtitle","button","onPress","activeOpacity","disabled","buttonText"],"sources":["C:/Users/PC/OneDrive/latest/SafeMitraLatest/screen/functional-part/SplashScreens.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { View, Text, TouchableOpacity, ActivityIndicator, Alert } from 'react-native';\r\nimport { styles } from '../styles-part/SplashScreenStyles';\r\nimport SafeMitraLogo from '../../components/SafeMitraLogo';\r\n\r\n// TODO: Import API service for authentication check\r\n// import { authService } from '../../services/authService';\r\n\r\nconst SplashScreen = ({ navigation }) => {\r\n  // TODO: Add loading state for API calls\r\n  // const [isLoading, setIsLoading] = useState(true);\r\n  \r\n  // TODO: Add error state for API error handling\r\n  // const [error, setError] = useState(null);\r\n  \r\n  // TODO: Add state for authentication status\r\n  // const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n\r\n  // TODO: Add useEffect to check authentication status on component mount\r\n  // useEffect(() => {\r\n  //   checkAuthStatus();\r\n  // }, []);\r\n  \r\n  // TODO: Implement function to check authentication status\r\n  // const checkAuthStatus = async () => {\r\n  //   try {\r\n  //     setIsLoading(true);\r\n  //     setError(null);\r\n  //     \r\n  //     // Call API to check if user is already authenticated\r\n  //     const response = await authService.checkAuthStatus();\r\n  //     \r\n  //     if (response.data.isAuthenticated) {\r\n  //       // User is already logged in, navigate to Dashboard\r\n  //       navigation.replace('Dashboard');\r\n  //     } else {\r\n  //       // User is not logged in, show splash screen\r\n  //       setIsLoading(false);\r\n  //     }\r\n  //   } catch (err) {\r\n  //     setError('Failed to check authentication status. Please try again.');\r\n  //     console.error(err);\r\n  //     setIsLoading(false);\r\n  //   }\r\n  // };\r\n\r\n  const handleGetStarted = () => {\r\n    navigation.navigate('MobileRegistration');\r\n  };\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      {/* Error Message */}\r\n      {/* TODO: Add error message display */}\r\n      {/* {error && <Text style={styles.errorText}>{error}</Text> */}\r\n      \r\n      {/* Loading Indicator */}\r\n      {/* TODO: Add loading indicator */}\r\n      {/* {isLoading && (\r\n        <View style={styles.loadingContainer}>\r\n          <ActivityIndicator size=\"large\" color=\"#FFFFFF\" />\r\n          <Text style={styles.loadingText}>Loading...</Text>\r\n        </View>\r\n      )} */}\r\n      \r\n      <View style={styles.contentContainer}>\r\n        <SafeMitraLogo color=\"#FFFFFF\" size={150} />\r\n        <Text style={styles.title}>Safety First</Text>\r\n        <Text style={styles.subtitle}>Your Safety, Our Priority</Text>\r\n      </View>\r\n      <TouchableOpacity\r\n        style={styles.button}\r\n        onPress={handleGetStarted}\r\n        activeOpacity={0.8}\r\n        disabled={false} // TODO: Disable during API calls\r\n      >\r\n        <Text style={styles.buttonText}>Get Started</Text>\r\n      </TouchableOpacity>\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default SplashScreen; "],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,gBAAA;AAAA,OAAAC,iBAAA;AAAA,OAAAC,KAAA;AAEnD,SAASC,MAAM,QAAQ,mCAAmC;AAC1D,OAAOC,aAAa,MAAM,gCAAgC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAK3D,MAAMC,YAAY,GAAGA,CAAC;EAAEC;AAAW,CAAC,KAAK;EAsCvC,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;IAC7BD,UAAU,CAACE,QAAQ,CAAC,oBAAoB,CAAC;EAC3C,CAAC;EAED,OACEJ,OAAA,CAACR,IAAI;IAACa,KAAK,EAAER,MAAM,CAACS,SAAU;IAAAC,QAAA,GAc5BP,OAAA,CAACR,IAAI;MAACa,KAAK,EAAER,MAAM,CAACW,gBAAiB;MAAAD,QAAA,GACnCP,OAAA,CAACF,aAAa;QAACW,KAAK,EAAC,SAAS;QAACC,IAAI,EAAE;MAAI;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,EAC5Cd,OAAA,CAACP,IAAI;QAACY,KAAK,EAAER,MAAM,CAACkB,KAAM;QAAAR,QAAA,EAAC;MAAY;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,EAC9Cd,OAAA,CAACP,IAAI;QAACY,KAAK,EAAER,MAAM,CAACmB,QAAS;QAAAT,QAAA,EAAC;MAAyB;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1D,CAAC,EACPd,OAAA,CAACN,gBAAgB;MACfW,KAAK,EAAER,MAAM,CAACoB,MAAO;MACrBC,OAAO,EAAEf,gBAAiB;MAC1BgB,aAAa,EAAE,GAAI;MACnBC,QAAQ,EAAE,KAAM;MAAAb,QAAA,EAEhBP,OAAA,CAACP,IAAI;QAACY,KAAK,EAAER,MAAM,CAACwB,UAAW;QAAAd,QAAA,EAAC;MAAW;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACf,CAAC;AAEX,CAAC;AAED,eAAeb,YAAY","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}