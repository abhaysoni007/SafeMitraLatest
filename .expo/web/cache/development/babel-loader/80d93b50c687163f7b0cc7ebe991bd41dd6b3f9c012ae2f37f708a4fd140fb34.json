{"ast":null,"code":"const sendAudioToBackend = async audioUri => {\n  try {\n    console.log('Starting audio upload...');\n    const formData = new FormData();\n    formData.append('audio', {\n      uri: audioUri,\n      type: 'audio/m4a',\n      name: 'recording.m4a'\n    });\n    const hosts = ['http://192.168.239.70:5000', 'http://152.58.122.215', 'http://localhost:5001', 'http://127.0.0.1:5001'];\n    let workingHost = null;\n    for (const host of hosts) {\n      try {\n        console.log(`Checking health at: ${host}/health`);\n        const healthResponse = await fetch(`${host}/health`, {\n          method: 'GET',\n          timeout: 2000\n        });\n        if (healthResponse.ok) {\n          console.log(`Found working backend at: ${host}`);\n          workingHost = host;\n          break;\n        }\n      } catch (error) {\n        console.log(`Health check failed for ${host}: ${error.message}`);\n      }\n    }\n    if (!workingHost) {\n      throw new Error('No reachable backend server found');\n    }\n    console.log(`Uploading audio to ${workingHost}/upload-audio`);\n    const response = await fetch(`${workingHost}/upload-audio`, {\n      method: 'POST',\n      body: formData,\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`Server responded with error: ${response.status}`);\n    }\n    const result = await response.json();\n    console.log('Upload successful:', result);\n    return result;\n  } catch (error) {\n    console.error('Error sending audio to backend:', error);\n    throw error;\n  }\n};\nconst fetchBackendData = async () => {\n  try {\n    const response = await fetch('http://localhost:5001/api/test');\n    const data = await response.json();\n    console.log('Data from backend:', data);\n  } catch (error) {\n    console.error('Error fetching data from backend:', error);\n  }\n};\nfetchBackendData();\nexport { sendAudioToBackend };","map":{"version":3,"names":["sendAudioToBackend","audioUri","console","log","formData","FormData","append","uri","type","name","hosts","workingHost","host","healthResponse","fetch","method","timeout","ok","error","message","Error","response","body","headers","status","result","json","fetchBackendData","data"],"sources":["C:/Users/PC/OneDrive/latest/SafeMitraLatest/services/audioService.js"],"sourcesContent":["const sendAudioToBackend = async (audioUri) => {\r\n  try {\r\n    console.log('Starting audio upload...');\r\n    const formData = new FormData();\r\n    formData.append('audio', {\r\n      uri: audioUri,\r\n      type: 'audio/m4a',\r\n      name: 'recording.m4a',\r\n    });\r\n\r\n    // Your actual device IP addresses (from ipconfig)\r\n    const hosts = [\r\n      // Your actual computer's IP addresses\r\n      'http://192.168.239.70:5000',   // Your main IP address\r\n      // Fallback options\r\n      'http://152.58.122.215',     // Android emulator\r\n      'http://localhost:5001',    // Direct localhost\r\n      'http://127.0.0.1:5001',    // Alternative localhost\r\n    ];\r\n\r\n    let workingHost = null;\r\n    \r\n    // First check which host is reachable using the health endpoint\r\n    for (const host of hosts) {\r\n      try {\r\n        console.log(`Checking health at: ${host}/health`);\r\n        const healthResponse = await fetch(`${host}/health`, { \r\n          method: 'GET',\r\n          timeout: 2000 \r\n        });\r\n        \r\n        if (healthResponse.ok) {\r\n          console.log(`Found working backend at: ${host}`);\r\n          workingHost = host;\r\n          break;\r\n        }\r\n      } catch (error) {\r\n        console.log(`Health check failed for ${host}: ${error.message}`);\r\n      }\r\n    }\r\n    \r\n    if (!workingHost) {\r\n      throw new Error('No reachable backend server found');\r\n    }\r\n    \r\n    // Now send the audio to the working host\r\n    console.log(`Uploading audio to ${workingHost}/upload-audio`);\r\n    const response = await fetch(`${workingHost}/upload-audio`, {\r\n      method: 'POST',\r\n      body: formData,\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data',\r\n      },\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Server responded with error: ${response.status}`);\r\n    }\r\n\r\n    const result = await response.json();\r\n    console.log('Upload successful:', result);\r\n    return result;\r\n  } catch (error) {\r\n    console.error('Error sending audio to backend:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Add a function to fetch data from the backend and log it to the console\r\nconst fetchBackendData = async () => {\r\n  try {\r\n    const response = await fetch('http://localhost:5001/api/test');\r\n    const data = await response.json();\r\n    console.log('Data from backend:', data);\r\n  } catch (error) {\r\n    console.error('Error fetching data from backend:', error);\r\n  }\r\n};\r\n\r\n// Call the function to fetch and log data\r\nfetchBackendData();\r\n\r\nexport { sendAudioToBackend };"],"mappings":"AAAA,MAAMA,kBAAkB,GAAG,MAAOC,QAAQ,IAAK;EAC7C,IAAI;IACFC,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;IACvC,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAE;MACvBC,GAAG,EAAEN,QAAQ;MACbO,IAAI,EAAE,WAAW;MACjBC,IAAI,EAAE;IACR,CAAC,CAAC;IAGF,MAAMC,KAAK,GAAG,CAEZ,4BAA4B,EAE5B,uBAAuB,EACvB,uBAAuB,EACvB,uBAAuB,CACxB;IAED,IAAIC,WAAW,GAAG,IAAI;IAGtB,KAAK,MAAMC,IAAI,IAAIF,KAAK,EAAE;MACxB,IAAI;QACFR,OAAO,CAACC,GAAG,CAAC,uBAAuBS,IAAI,SAAS,CAAC;QACjD,MAAMC,cAAc,GAAG,MAAMC,KAAK,CAAC,GAAGF,IAAI,SAAS,EAAE;UACnDG,MAAM,EAAE,KAAK;UACbC,OAAO,EAAE;QACX,CAAC,CAAC;QAEF,IAAIH,cAAc,CAACI,EAAE,EAAE;UACrBf,OAAO,CAACC,GAAG,CAAC,6BAA6BS,IAAI,EAAE,CAAC;UAChDD,WAAW,GAAGC,IAAI;UAClB;QACF;MACF,CAAC,CAAC,OAAOM,KAAK,EAAE;QACdhB,OAAO,CAACC,GAAG,CAAC,2BAA2BS,IAAI,KAAKM,KAAK,CAACC,OAAO,EAAE,CAAC;MAClE;IACF;IAEA,IAAI,CAACR,WAAW,EAAE;MAChB,MAAM,IAAIS,KAAK,CAAC,mCAAmC,CAAC;IACtD;IAGAlB,OAAO,CAACC,GAAG,CAAC,sBAAsBQ,WAAW,eAAe,CAAC;IAC7D,MAAMU,QAAQ,GAAG,MAAMP,KAAK,CAAC,GAAGH,WAAW,eAAe,EAAE;MAC1DI,MAAM,EAAE,MAAM;MACdO,IAAI,EAAElB,QAAQ;MACdmB,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;IAEF,IAAI,CAACF,QAAQ,CAACJ,EAAE,EAAE;MAChB,MAAM,IAAIG,KAAK,CAAC,gCAAgCC,QAAQ,CAACG,MAAM,EAAE,CAAC;IACpE;IAEA,MAAMC,MAAM,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IACpCxB,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEsB,MAAM,CAAC;IACzC,OAAOA,MAAM;EACf,CAAC,CAAC,OAAOP,KAAK,EAAE;IACdhB,OAAO,CAACgB,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;IACvD,MAAMA,KAAK;EACb;AACF,CAAC;AAGD,MAAMS,gBAAgB,GAAG,MAAAA,CAAA,KAAY;EACnC,IAAI;IACF,MAAMN,QAAQ,GAAG,MAAMP,KAAK,CAAC,gCAAgC,CAAC;IAC9D,MAAMc,IAAI,GAAG,MAAMP,QAAQ,CAACK,IAAI,CAAC,CAAC;IAClCxB,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEyB,IAAI,CAAC;EACzC,CAAC,CAAC,OAAOV,KAAK,EAAE;IACdhB,OAAO,CAACgB,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;EAC3D;AACF,CAAC;AAGDS,gBAAgB,CAAC,CAAC;AAElB,SAAS3B,kBAAkB","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}