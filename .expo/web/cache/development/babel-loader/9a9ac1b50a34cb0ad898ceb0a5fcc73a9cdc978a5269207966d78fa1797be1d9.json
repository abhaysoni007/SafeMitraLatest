{"ast":null,"code":"import { DEVICE_CONNECTIVITY_EVENT } from './privateTypes';\nimport { NetInfoCellularGeneration, NetInfoStateType } from './types';\nconst isWindowPresent = true;\nconst connection = isWindowPresent && !window.hasOwnProperty('tizen') && !window.hasOwnProperty('webOS') ? window.navigator.connection || window.navigator.mozConnection || window.navigator.webkitConnection : undefined;\nconst typeMapping = {\n  bluetooth: NetInfoStateType.bluetooth,\n  cellular: NetInfoStateType.cellular,\n  ethernet: NetInfoStateType.ethernet,\n  none: NetInfoStateType.none,\n  other: NetInfoStateType.other,\n  unknown: NetInfoStateType.unknown,\n  wifi: NetInfoStateType.wifi,\n  wimax: NetInfoStateType.wimax,\n  mixed: NetInfoStateType.other\n};\nconst effectiveTypeMapping = {\n  '2g': NetInfoCellularGeneration['2g'],\n  '3g': NetInfoCellularGeneration['3g'],\n  '4g': NetInfoCellularGeneration['4g'],\n  'slow-2g': NetInfoCellularGeneration['2g']\n};\nconst getCurrentState = _requestedInterface => {\n  const isConnected = isWindowPresent ? navigator.onLine : false;\n  const baseState = {\n    isInternetReachable: null\n  };\n  if (!connection) {\n    if (isConnected) {\n      const state = Object.assign({}, baseState, {\n        isConnected: true,\n        type: NetInfoStateType.other,\n        details: {\n          isConnectionExpensive: false\n        }\n      });\n      return state;\n    }\n    const state = Object.assign({}, baseState, {\n      isConnected: false,\n      isInternetReachable: false,\n      type: NetInfoStateType.none,\n      details: null\n    });\n    return state;\n  }\n  const isConnectionExpensive = connection.saveData;\n  const type = connection.type ? typeMapping[connection.type] : isConnected ? NetInfoStateType.other : NetInfoStateType.unknown;\n  if (type === NetInfoStateType.bluetooth) {\n    const state = Object.assign({}, baseState, {\n      isConnected: true,\n      type,\n      details: {\n        isConnectionExpensive\n      }\n    });\n    return state;\n  } else if (type === NetInfoStateType.cellular) {\n    const state = Object.assign({}, baseState, {\n      isConnected: true,\n      type,\n      details: {\n        isConnectionExpensive,\n        cellularGeneration: effectiveTypeMapping[connection.effectiveType] || null,\n        carrier: null\n      }\n    });\n    return state;\n  } else if (type === NetInfoStateType.ethernet) {\n    const state = Object.assign({}, baseState, {\n      isConnected: true,\n      type,\n      details: {\n        isConnectionExpensive,\n        ipAddress: null,\n        subnet: null\n      }\n    });\n    return state;\n  } else if (type === NetInfoStateType.wifi) {\n    const state = Object.assign({}, baseState, {\n      isConnected: true,\n      type,\n      details: {\n        isConnectionExpensive,\n        ssid: null,\n        bssid: null,\n        strength: null,\n        ipAddress: null,\n        subnet: null,\n        frequency: null,\n        linkSpeed: null,\n        rxLinkSpeed: null,\n        txLinkSpeed: null\n      }\n    });\n    return state;\n  } else if (type === NetInfoStateType.wimax) {\n    const state = Object.assign({}, baseState, {\n      isConnected: true,\n      type,\n      details: {\n        isConnectionExpensive\n      }\n    });\n    return state;\n  } else if (type === NetInfoStateType.none) {\n    const state = Object.assign({}, baseState, {\n      isConnected: false,\n      isInternetReachable: false,\n      type,\n      details: null\n    });\n    return state;\n  } else if (type === NetInfoStateType.unknown) {\n    const state = Object.assign({}, baseState, {\n      isConnected,\n      isInternetReachable: null,\n      type,\n      details: null\n    });\n    return state;\n  }\n  const state = Object.assign({}, baseState, {\n    isConnected: true,\n    type: NetInfoStateType.other,\n    details: {\n      isConnectionExpensive\n    }\n  });\n  return state;\n};\nconst handlers = [];\nconst nativeHandlers = [];\nconst RNCNetInfo = {\n  addListener(type, handler) {\n    switch (type) {\n      case DEVICE_CONNECTIVITY_EVENT:\n        {\n          const nativeHandler = () => {\n            handler(getCurrentState());\n          };\n          if (connection) {\n            connection.addEventListener('change', nativeHandler);\n          } else {\n            if (isWindowPresent) {\n              window.addEventListener('online', nativeHandler, false);\n              window.addEventListener('offline', nativeHandler, false);\n            }\n          }\n          handlers.push(handler);\n          nativeHandlers.push(nativeHandler);\n          break;\n        }\n    }\n  },\n  removeListeners(type, handler) {\n    switch (type) {\n      case DEVICE_CONNECTIVITY_EVENT:\n        {\n          const index = handlers.indexOf(handler);\n          const nativeHandler = nativeHandlers[index];\n          if (connection) {\n            connection.removeEventListener('change', nativeHandler);\n          } else {\n            if (isWindowPresent) {\n              window.removeEventListener('online', nativeHandler);\n              window.removeEventListener('offline', nativeHandler);\n            }\n          }\n          handlers.splice(index, 1);\n          nativeHandlers.splice(index, 1);\n          break;\n        }\n    }\n  },\n  async getCurrentState(requestedInterface) {\n    return getCurrentState(requestedInterface);\n  },\n  configure() {\n    return;\n  }\n};\nexport default RNCNetInfo;","map":{"version":3,"names":["DEVICE_CONNECTIVITY_EVENT","NetInfoCellularGeneration","NetInfoStateType","isWindowPresent","connection","window","hasOwnProperty","navigator","mozConnection","webkitConnection","undefined","typeMapping","bluetooth","cellular","ethernet","none","other","unknown","wifi","wimax","mixed","effectiveTypeMapping","getCurrentState","_requestedInterface","isConnected","onLine","baseState","isInternetReachable","state","Object","assign","type","details","isConnectionExpensive","saveData","cellularGeneration","effectiveType","carrier","ipAddress","subnet","ssid","bssid","strength","frequency","linkSpeed","rxLinkSpeed","txLinkSpeed","handlers","nativeHandlers","RNCNetInfo","addListener","handler","nativeHandler","addEventListener","push","removeListeners","index","indexOf","removeEventListener","splice","requestedInterface","configure"],"sources":["C:\\Users\\PC\\OneDrive\\latest\\SafeMitraLatest\\node_modules\\@react-native-community\\netinfo\\lib\\module\\internal\\nativeModule.web.ts"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nimport {\n  DEVICE_CONNECTIVITY_EVENT,\n  NetInfoNativeModule,\n  NetInfoNativeModuleState,\n} from './privateTypes';\nimport {\n  NetInfoBluetoothState,\n  NetInfoCellularGeneration,\n  NetInfoCellularState,\n  NetInfoEthernetState,\n  NetInfoNoConnectionState,\n  NetInfoOtherState,\n  NetInfoState,\n  NetInfoStateType,\n  NetInfoUnknownState,\n  NetInfoWifiState,\n  NetInfoWimaxState,\n} from './types';\n\n// See https://wicg.github.io/netinfo/#dom-connectiontype\ntype ConnectionType =\n  | 'bluetooth'\n  | 'cellular'\n  | 'ethernet'\n  | 'mixed'\n  | 'none'\n  | 'other'\n  | 'unknown'\n  | 'wifi'\n  | 'wimax';\n\n// See https://wicg.github.io/netinfo/#dom-effectiveconnectiontype\ntype ConnectionEffectiveType = '2g' | '3g' | '4g' | 'slow-2g';\n\n// https://wicg.github.io/netinfo/#dom-networkinformation-savedata\ntype ConnectionSaveData = boolean;\n\ninterface Events {\n  change: Event;\n}\n\ninterface Connection {\n  type: ConnectionType;\n  effectiveType: ConnectionEffectiveType;\n  saveData: ConnectionSaveData;\n  addEventListener<K extends keyof Events>(\n    type: K,\n    listener: (event: Events[K]) => void,\n  ): void;\n  removeEventListener<K extends keyof Events>(\n    type: K,\n    listener: (event: Events[K]) => void,\n  ): void;\n}\n\n// Create (optional) connection APIs on navigator\ndeclare global {\n  interface Navigator {\n    connection?: Connection;\n    mozConnection?: Connection;\n    webkitConnection?: Connection;\n  }\n}\n// Use a constant test of this form because in SSR on next.js, optional chaining is not sufficient,\n// but this test correctly detects that window is not available and allows for conditionals before access\nconst isWindowPresent = typeof window !== 'undefined';\n\n// Check if window exists and if the browser supports the connection API\nconst connection = (isWindowPresent && !window.hasOwnProperty('tizen') && !window.hasOwnProperty('webOS'))\n  ? window.navigator.connection ||\n    window.navigator.mozConnection ||\n    window.navigator.webkitConnection\n  : undefined;\n\n// Map browser types to native types\nconst typeMapping: Record<ConnectionType, NetInfoStateType> = {\n  bluetooth: NetInfoStateType.bluetooth,\n  cellular: NetInfoStateType.cellular,\n  ethernet: NetInfoStateType.ethernet,\n  none: NetInfoStateType.none,\n  other: NetInfoStateType.other,\n  unknown: NetInfoStateType.unknown,\n  wifi: NetInfoStateType.wifi,\n  wimax: NetInfoStateType.wimax,\n  mixed: NetInfoStateType.other,\n};\nconst effectiveTypeMapping: Record<\n  ConnectionEffectiveType,\n  NetInfoCellularGeneration\n> = {\n  '2g': NetInfoCellularGeneration['2g'],\n  '3g': NetInfoCellularGeneration['3g'],\n  '4g': NetInfoCellularGeneration['4g'],\n  'slow-2g': NetInfoCellularGeneration['2g'],\n};\n\n// Determine current state of connection\nconst getCurrentState = (\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  _requestedInterface?: string,\n): Pick<NetInfoState, Exclude<keyof NetInfoState, 'isInternetReachable'>> => {\n  const isConnected = isWindowPresent ? navigator.onLine : false;\n  const baseState = {\n    isInternetReachable: null,\n  };\n\n  // If we don't have a connection object, we return minimal information\n  if (!connection) {\n    if (isConnected) {\n      const state: NetInfoOtherState = {\n        ...baseState,\n        isConnected: true,\n        type: NetInfoStateType.other,\n        details: {\n          isConnectionExpensive: false,\n        },\n      };\n      return state;\n    }\n\n    const state: NetInfoNoConnectionState = {\n      ...baseState,\n      isConnected: false,\n      isInternetReachable: false,\n      type: NetInfoStateType.none,\n      details: null,\n    };\n    return state;\n  }\n\n  // Otherwise try to return detailed information\n  const isConnectionExpensive = connection.saveData;\n  const type: NetInfoStateType = connection.type\n    ? typeMapping[connection.type]\n    : isConnected\n    ? NetInfoStateType.other\n    : NetInfoStateType.unknown;\n\n  if (type === NetInfoStateType.bluetooth) {\n    const state: NetInfoBluetoothState = {\n      ...baseState,\n      isConnected: true,\n      type,\n      details: {\n        isConnectionExpensive,\n      },\n    };\n    return state;\n  } else if (type === NetInfoStateType.cellular) {\n    const state: NetInfoCellularState = {\n      ...baseState,\n      isConnected: true,\n      type,\n      details: {\n        isConnectionExpensive,\n        cellularGeneration:\n          effectiveTypeMapping[connection.effectiveType] || null,\n        carrier: null,\n      },\n    };\n    return state;\n  } else if (type === NetInfoStateType.ethernet) {\n    const state: NetInfoEthernetState = {\n      ...baseState,\n      isConnected: true,\n      type,\n      details: {\n        isConnectionExpensive,\n        ipAddress: null,\n        subnet: null,\n      },\n    };\n    return state;\n  } else if (type === NetInfoStateType.wifi) {\n    const state: NetInfoWifiState = {\n      ...baseState,\n      isConnected: true,\n      type,\n      details: {\n        isConnectionExpensive,\n        ssid: null,\n        bssid: null,\n        strength: null,\n        ipAddress: null,\n        subnet: null,\n        frequency: null,\n        linkSpeed: null,\n        rxLinkSpeed: null,\n        txLinkSpeed: null,\n      },\n    };\n    return state;\n  } else if (type === NetInfoStateType.wimax) {\n    const state: NetInfoWimaxState = {\n      ...baseState,\n      isConnected: true,\n      type,\n      details: {\n        isConnectionExpensive,\n      },\n    };\n    return state;\n  } else if (type === NetInfoStateType.none) {\n    const state: NetInfoNoConnectionState = {\n      ...baseState,\n      isConnected: false,\n      isInternetReachable: false,\n      type,\n      details: null,\n    };\n    return state;\n  } else if (type === NetInfoStateType.unknown) {\n    const state: NetInfoUnknownState = {\n      ...baseState,\n      isConnected,\n      isInternetReachable: null,\n      type,\n      details: null,\n    };\n    return state;\n  }\n\n  const state: NetInfoOtherState = {\n    ...baseState,\n    isConnected: true,\n    type: NetInfoStateType.other,\n    details: {\n      isConnectionExpensive,\n    },\n  };\n  return state;\n};\n\nconst handlers: ((state: NetInfoNativeModuleState) => void)[] = [];\nconst nativeHandlers: (() => void)[] = [];\n\nconst RNCNetInfo: NetInfoNativeModule = {\n  addListener(type, handler): void {\n    switch (type) {\n      case DEVICE_CONNECTIVITY_EVENT: {\n        const nativeHandler = (): void => {\n          handler(getCurrentState());\n        };\n\n        if (connection) {\n          connection.addEventListener('change', nativeHandler);\n        } else {\n          if (isWindowPresent) {\n            window.addEventListener('online', nativeHandler, false);\n            window.addEventListener('offline', nativeHandler, false);\n          }\n        }\n\n        // Remember handlers\n        handlers.push(handler);\n        nativeHandlers.push(nativeHandler);\n\n        break;\n      }\n    }\n  },\n\n  removeListeners(type, handler): void {\n    switch (type) {\n      case DEVICE_CONNECTIVITY_EVENT: {\n        // Get native handler\n        const index = handlers.indexOf(handler);\n        const nativeHandler = nativeHandlers[index];\n\n        if (connection) {\n          connection.removeEventListener('change', nativeHandler);\n        } else {\n          if (isWindowPresent) {\n            window.removeEventListener('online', nativeHandler);\n            window.removeEventListener('offline', nativeHandler);\n          }\n        }\n\n        // Remove handlers\n        handlers.splice(index, 1);\n        nativeHandlers.splice(index, 1);\n\n        break;\n      }\n    }\n  },\n\n  async getCurrentState(requestedInterface): Promise<NetInfoNativeModuleState> {\n    return getCurrentState(requestedInterface);\n  },\n\n  configure(): void {\n    return;\n  },\n};\n\nexport default RNCNetInfo;\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}