{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PC\\\\OneDrive\\\\dimag-kharaab-backup\\\\SafeMitra\\\\SafeMitra-app\\\\screen\\\\functional-part\\\\VoiceTrainingScreen.js\";\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { Ionicons } from '@expo/vector-icons';\nimport { styles } from '../styles-part/VoiceTrainingScreenStyles';\nimport SafeMitraLogo from '../../components/SafeMitraLogo';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst VoiceTrainingScreen = ({\n  navigation\n}) => {\n  const [recordings, setRecordings] = useState([null, null, null]);\n  const [isRecording, setIsRecording] = useState(false);\n  const [currentSample, setCurrentSample] = useState(0);\n  const [isTrainingComplete, setIsTrainingComplete] = useState(false);\n  const pulseAnim = new Animated.Value(1);\n  useEffect(() => {\n    const unsubscribe = navigation.addListener('beforeRemove', e => {\n      if (isTrainingComplete) {\n        return;\n      }\n      e.preventDefault();\n      Alert.alert('Voice Training Required', 'You need to complete voice training before proceeding. This is for your safety.', [{\n        text: \"OK, I'll complete it\",\n        style: 'default'\n      }]);\n    });\n    return unsubscribe;\n  }, [navigation, isTrainingComplete]);\n  useEffect(() => {\n    if (isRecording) {\n      Animated.loop(Animated.sequence([Animated.timing(pulseAnim, {\n        toValue: 1.2,\n        duration: 1000,\n        useNativeDriver: true\n      }), Animated.timing(pulseAnim, {\n        toValue: 1,\n        duration: 1000,\n        useNativeDriver: true\n      })])).start();\n    } else {\n      pulseAnim.setValue(1);\n    }\n  }, [isRecording]);\n  const handleStartRecording = async index => {\n    setIsRecording(true);\n    setCurrentSample(index);\n    setTimeout(() => {\n      handleStopRecording(index);\n    }, 3000);\n  };\n  const handleStopRecording = async index => {\n    setIsRecording(false);\n    const newRecordings = [...recordings];\n    newRecordings[index] = {\n      completed: true\n    };\n    setRecordings(newRecordings);\n  };\n  const handleReRecord = index => {\n    const newRecordings = [...recordings];\n    newRecordings[index] = null;\n    setRecordings(newRecordings);\n    setIsTrainingComplete(false);\n  };\n  const getProgress = () => {\n    return recordings.filter(r => r !== null).length;\n  };\n  const handleContinue = async () => {\n    if (getProgress() === 3) {\n      setIsTrainingComplete(true);\n      Alert.alert('Voice Training Complete', 'Great job! Your voice samples have been saved successfully.', [{\n        text: 'Continue',\n        onPress: () => navigation.navigate('AddGuardian')\n      }]);\n    }\n  };\n  const renderMicButton = index => {\n    const isComplete = recordings[index]?.completed;\n    const isActive = currentSample === index && isRecording;\n    return _jsxDEV(View, {\n      style: styles.sampleContainer,\n      children: [_jsxDEV(Text, {\n        style: styles.sampleText,\n        children: [\"Voice Sample \", index + 1]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 9\n      }, this), _jsxDEV(Animated.View, {\n        style: [styles.micButtonContainer, isActive && {\n          transform: [{\n            scale: pulseAnim\n          }]\n        }],\n        children: _jsxDEV(TouchableOpacity, {\n          style: [styles.micButton, isComplete && styles.micButtonComplete],\n          onPress: () => !isRecording && handleStartRecording(index),\n          disabled: isRecording || false,\n          children: isComplete ? _jsxDEV(Ionicons, {\n            name: \"checkmark\",\n            size: 24,\n            color: \"#FFF\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 15\n          }, this) : _jsxDEV(Ionicons, {\n            name: \"mic\",\n            size: 24,\n            color: \"#FFF\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 250,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 9\n      }, this), isComplete && _jsxDEV(TouchableOpacity, {\n        onPress: () => handleReRecord(index),\n        disabled: false,\n        children: _jsxDEV(Text, {\n          style: styles.reRecordText,\n          children: \"Re-record\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 11\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 7\n    }, this);\n  };\n  return _jsxDEV(SafeAreaView, {\n    style: styles.container,\n    children: _jsxDEV(ScrollView, {\n      contentContainerStyle: styles.scrollContainer,\n      children: [_jsxDEV(View, {\n        style: styles.header,\n        children: [_jsxDEV(TouchableOpacity, {\n          style: styles.backButton,\n          onPress: () => navigation.goBack(),\n          children: _jsxDEV(Ionicons, {\n            name: \"arrow-back\",\n            size: 24,\n            color: \"#FF3B30\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 274,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 11\n        }, this), _jsxDEV(View, {\n          style: styles.logoContainer,\n          children: [_jsxDEV(SafeMitraLogo, {\n            color: \"#FF3B30\",\n            size: 30\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 277,\n            columnNumber: 13\n          }, this), _jsxDEV(Text, {\n            style: styles.logoText,\n            children: \"SafeMitra\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 278,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 11\n        }, this), _jsxDEV(View, {\n          style: styles.headerRight\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 9\n      }, this), _jsxDEV(Text, {\n        style: styles.title,\n        children: \"Voice Training\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 9\n      }, this), _jsxDEV(Text, {\n        style: styles.subtitle,\n        children: \"Record your voice saying 'Help Me' three times\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 9\n      }, this), _jsxDEV(View, {\n        style: styles.micButtonsContainer,\n        children: [0, 1, 2].map(renderMicButton)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 9\n      }, this), _jsxDEV(View, {\n        style: styles.progressContainer,\n        children: [_jsxDEV(View, {\n          style: styles.progressBar,\n          children: _jsxDEV(View, {\n            style: [styles.progressFill, {\n              width: `${getProgress() / 3 * 100}%`\n            }]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 307,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 11\n        }, this), _jsxDEV(Text, {\n          style: styles.progressText,\n          children: [getProgress(), \"/3 completed\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 9\n      }, this), _jsxDEV(View, {\n        style: styles.instructionBox,\n        children: [_jsxDEV(Ionicons, {\n          name: \"information-circle-outline\",\n          size: 24,\n          color: \"#666\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 11\n        }, this), _jsxDEV(Text, {\n          style: styles.instructionText,\n          children: \"Please record in a quiet place for best accuracy.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 9\n      }, this), _jsxDEV(TouchableOpacity, {\n        style: [styles.continueButton, {\n          opacity: getProgress() === 3 ? 1 : 0.7\n        }],\n        disabled: getProgress() !== 3 || false,\n        onPress: handleContinue,\n        children: false ? _jsxDEV(ActivityIndicator, {\n          color: \"#FFFFFF\",\n          size: \"small\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 13\n        }, this) : _jsxDEV(_Fragment, {\n          children: [_jsxDEV(Text, {\n            style: styles.continueButtonText,\n            children: \"Save & Continue\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 338,\n            columnNumber: 15\n          }, this), _jsxDEV(Ionicons, {\n            name: \"arrow-forward\",\n            size: 20,\n            color: \"#FFF\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 339,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 267,\n    columnNumber: 5\n  }, this);\n};\nexport default VoiceTrainingScreen;","map":{"version":3,"names":["React","useState","useEffect","View","Text","TouchableOpacity","ScrollView","SafeAreaView","Animated","Alert","ActivityIndicator","Ionicons","styles","SafeMitraLogo","jsxDEV","_jsxDEV","Fragment","_Fragment","VoiceTrainingScreen","navigation","recordings","setRecordings","isRecording","setIsRecording","currentSample","setCurrentSample","isTrainingComplete","setIsTrainingComplete","pulseAnim","Value","unsubscribe","addListener","e","preventDefault","alert","text","style","loop","sequence","timing","toValue","duration","useNativeDriver","start","setValue","handleStartRecording","index","setTimeout","handleStopRecording","newRecordings","completed","handleReRecord","getProgress","filter","r","length","handleContinue","onPress","navigate","renderMicButton","isComplete","isActive","sampleContainer","children","sampleText","fileName","_jsxFileName","lineNumber","columnNumber","micButtonContainer","transform","scale","micButton","micButtonComplete","disabled","name","size","color","reRecordText","container","contentContainerStyle","scrollContainer","header","backButton","goBack","logoContainer","logoText","headerRight","title","subtitle","micButtonsContainer","map","progressContainer","progressBar","progressFill","width","progressText","instructionBox","instructionText","continueButton","opacity","continueButtonText"],"sources":["C:/Users/PC/OneDrive/dimag-kharaab-backup/SafeMitra/SafeMitra-app/screen/functional-part/VoiceTrainingScreen.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport {\r\n  View,\r\n  Text,\r\n  TouchableOpacity,\r\n  ScrollView,\r\n  SafeAreaView,\r\n  Animated,\r\n  Alert,\r\n  ActivityIndicator,\r\n} from 'react-native';\r\nimport { Ionicons } from '@expo/vector-icons';\r\nimport { styles } from '../styles-part/VoiceTrainingScreenStyles';\r\nimport SafeMitraLogo from '../../components/SafeMitraLogo';\r\n\r\n// TODO: Import API service for voice training\r\n// import { voiceService } from '../../services/voiceService';\r\n\r\nconst VoiceTrainingScreen = ({ navigation }) => {\r\n  const [recordings, setRecordings] = useState([null, null, null]);\r\n  const [isRecording, setIsRecording] = useState(false);\r\n  const [currentSample, setCurrentSample] = useState(0);\r\n  const [isTrainingComplete, setIsTrainingComplete] = useState(false);\r\n  const pulseAnim = new Animated.Value(1);\r\n  \r\n  // TODO: Add loading state for API calls\r\n  // const [isLoading, setIsLoading] = useState(false);\r\n  \r\n  // TODO: Add error state for API error handling\r\n  // const [error, setError] = useState(null);\r\n  \r\n  // TODO: Add state for voice data\r\n  // const [voiceData, setVoiceData] = useState({\r\n  //   samples: [],\r\n  //   isTrained: false\r\n  // });\r\n\r\n  // Prevent going back if training is not complete\r\n  useEffect(() => {\r\n    const unsubscribe = navigation.addListener('beforeRemove', (e) => {\r\n      if (isTrainingComplete) {\r\n        return;\r\n      }\r\n\r\n      // Prevent default behavior of leaving the screen\r\n      e.preventDefault();\r\n\r\n      // Prompt the user before leaving the screen\r\n      Alert.alert(\r\n        'Voice Training Required',\r\n        'You need to complete voice training before proceeding. This is for your safety.',\r\n        [\r\n          { text: \"OK, I'll complete it\", style: 'default' }\r\n        ]\r\n      );\r\n    });\r\n\r\n    return unsubscribe;\r\n  }, [navigation, isTrainingComplete]);\r\n\r\n  // TODO: Add useEffect to check if voice training is already completed\r\n  // useEffect(() => {\r\n  //   checkVoiceTrainingStatus();\r\n  // }, []);\r\n  \r\n  // TODO: Implement function to check voice training status\r\n  // const checkVoiceTrainingStatus = async () => {\r\n  //   try {\r\n  //     setIsLoading(true);\r\n  //     setError(null);\r\n  //     \r\n  //     // Call API to check if voice training is already completed\r\n  //     const response = await voiceService.getVoiceTrainingStatus();\r\n  //     \r\n  //     if (response.data.isTrained) {\r\n  //       // Voice training is already completed, navigate to next screen\r\n  //       navigation.replace('AddGuardian');\r\n  //     } else {\r\n  //       // Voice training is not completed, show training screen\r\n  //       setIsLoading(false);\r\n  //     }\r\n  //   } catch (err) {\r\n  //     setError('Failed to check voice training status. Please try again.');\r\n  //     console.error(err);\r\n  //     setIsLoading(false);\r\n  //   }\r\n  // };\r\n\r\n  useEffect(() => {\r\n    if (isRecording) {\r\n      Animated.loop(\r\n        Animated.sequence([\r\n          Animated.timing(pulseAnim, {\r\n            toValue: 1.2,\r\n            duration: 1000,\r\n            useNativeDriver: true,\r\n          }),\r\n          Animated.timing(pulseAnim, {\r\n            toValue: 1,\r\n            duration: 1000,\r\n            useNativeDriver: true,\r\n          }),\r\n        ])\r\n      ).start();\r\n    } else {\r\n      pulseAnim.setValue(1);\r\n    }\r\n  }, [isRecording]);\r\n\r\n  // TODO: Update handleStartRecording to use actual recording functionality\r\n  const handleStartRecording = async (index) => {\r\n    setIsRecording(true);\r\n    setCurrentSample(index);\r\n    \r\n    // TODO: Implement actual recording logic here\r\n    // try {\r\n    //   // Start recording using voice service\r\n    //   await voiceService.startRecording();\r\n    //   \r\n    //   // Set a timeout to stop recording after 3 seconds\r\n    //   setTimeout(() => {\r\n    //     handleStopRecording(index);\r\n    //   }, 3000);\r\n    // } catch (err) {\r\n    //   setError('Failed to start recording. Please try again.');\r\n    //   Alert.alert('Error', 'Failed to start recording. Please try again.');\r\n    //   console.error(err);\r\n    //   setIsRecording(false);\r\n    // }\r\n    \r\n    // Temporary implementation for development\r\n    setTimeout(() => {\r\n      handleStopRecording(index);\r\n    }, 3000); // Simulate 3 second recording\r\n  };\r\n\r\n  // TODO: Update handleStopRecording to save the recording\r\n  const handleStopRecording = async (index) => {\r\n    setIsRecording(false);\r\n    \r\n    // TODO: Implement actual recording stop and save logic\r\n    // try {\r\n    //   // Stop recording and get the recording data\r\n    //   const recordingData = await voiceService.stopRecording();\r\n    //   \r\n    //   // Update recordings state with the new recording\r\n    //   const newRecordings = [...recordings];\r\n    //   newRecordings[index] = { \r\n    //     completed: true,\r\n    //     data: recordingData\r\n    //   };\r\n    //   setRecordings(newRecordings);\r\n    // } catch (err) {\r\n    //   setError('Failed to save recording. Please try again.');\r\n    //   Alert.alert('Error', 'Failed to save recording. Please try again.');\r\n    //   console.error(err);\r\n    // }\r\n    \r\n    // Temporary implementation for development\r\n    const newRecordings = [...recordings];\r\n    newRecordings[index] = { completed: true };\r\n    setRecordings(newRecordings);\r\n  };\r\n\r\n  const handleReRecord = (index) => {\r\n    const newRecordings = [...recordings];\r\n    newRecordings[index] = null;\r\n    setRecordings(newRecordings);\r\n    setIsTrainingComplete(false);\r\n  };\r\n\r\n  const getProgress = () => {\r\n    return recordings.filter(r => r !== null).length;\r\n  };\r\n\r\n  // TODO: Update handleContinue to save voice training data to backend\r\n  const handleContinue = async () => {\r\n    if (getProgress() === 3) {\r\n      // TODO: Implement API call to save voice training data\r\n      // try {\r\n      //   setIsLoading(true);\r\n      //   setError(null);\r\n      //   \r\n      //   // Prepare voice data for API\r\n      //   const voiceSamples = recordings.map(recording => recording.data);\r\n      //   \r\n      //   // Call API to save voice training data\r\n      //   await voiceService.saveVoiceTraining({\r\n      //     samples: voiceSamples\r\n      //   });\r\n      //   \r\n      //   // Update training status\r\n      //   setIsTrainingComplete(true);\r\n      //   \r\n      //   // Show success message\r\n      //   Alert.alert(\r\n      //     'Voice Training Complete',\r\n      //     'Great job! Your voice samples have been saved successfully.',\r\n      //     [\r\n      //       {\r\n      //         text: 'Continue',\r\n      //         onPress: () => navigation.navigate('AddGuardian')\r\n      //       }\r\n      //     ]\r\n      //   );\r\n      // } catch (err) {\r\n      //   setError('Failed to save voice training data. Please try again.');\r\n      //   Alert.alert('Error', 'Failed to save voice training data. Please try again.');\r\n      //   console.error(err);\r\n      // } finally {\r\n      //   setIsLoading(false);\r\n      // }\r\n      \r\n      // Temporary implementation for development\r\n      setIsTrainingComplete(true);\r\n      Alert.alert(\r\n        'Voice Training Complete',\r\n        'Great job! Your voice samples have been saved successfully.',\r\n        [\r\n          {\r\n            text: 'Continue',\r\n            onPress: () => navigation.navigate('AddGuardian')\r\n          }\r\n        ]\r\n      );\r\n    }\r\n  };\r\n\r\n  const renderMicButton = (index) => {\r\n    const isComplete = recordings[index]?.completed;\r\n    const isActive = currentSample === index && isRecording;\r\n\r\n    return (\r\n      <View style={styles.sampleContainer} key={index}>\r\n        <Text style={styles.sampleText}>Voice Sample {index + 1}</Text>\r\n        <Animated.View\r\n          style={[\r\n            styles.micButtonContainer,\r\n            isActive && { transform: [{ scale: pulseAnim }] }\r\n          ]}\r\n        >\r\n          <TouchableOpacity\r\n            style={[styles.micButton, isComplete && styles.micButtonComplete]}\r\n            onPress={() => !isRecording && handleStartRecording(index)}\r\n            disabled={isRecording || false} // TODO: Disable during API calls\r\n          >\r\n            {isComplete ? (\r\n              <Ionicons name=\"checkmark\" size={24} color=\"#FFF\" />\r\n            ) : (\r\n              <Ionicons name=\"mic\" size={24} color=\"#FFF\" />\r\n            )}\r\n          </TouchableOpacity>\r\n        </Animated.View>\r\n        {isComplete && (\r\n          <TouchableOpacity \r\n            onPress={() => handleReRecord(index)}\r\n            disabled={false} // TODO: Disable during API calls\r\n          >\r\n            <Text style={styles.reRecordText}>Re-record</Text>\r\n          </TouchableOpacity>\r\n        )}\r\n      </View>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <SafeAreaView style={styles.container}>\r\n      <ScrollView contentContainerStyle={styles.scrollContainer}>\r\n        <View style={styles.header}>\r\n          <TouchableOpacity\r\n            style={styles.backButton}\r\n            onPress={() => navigation.goBack()}\r\n          >\r\n            <Ionicons name=\"arrow-back\" size={24} color=\"#FF3B30\" />\r\n          </TouchableOpacity>\r\n          <View style={styles.logoContainer}>\r\n            <SafeMitraLogo color=\"#FF3B30\" size={30} />\r\n            <Text style={styles.logoText}>SafeMitra</Text>\r\n          </View>\r\n          <View style={styles.headerRight} />\r\n        </View>\r\n\r\n        {/* Error Message */}\r\n        {/* TODO: Add error message display */}\r\n        {/* {error && <Text style={styles.errorText}>{error}</Text> */}\r\n        \r\n        {/* Loading Indicator */}\r\n        {/* TODO: Add loading indicator */}\r\n        {/* {isLoading && (\r\n          <View style={styles.loadingContainer}>\r\n            <ActivityIndicator size=\"large\" color=\"#FF3B30\" />\r\n            <Text style={styles.loadingText}>Loading...</Text>\r\n          </View>\r\n        )} */}\r\n\r\n        <Text style={styles.title}>Voice Training</Text>\r\n        <Text style={styles.subtitle}>\r\n          Record your voice saying 'Help Me' three times\r\n        </Text>\r\n\r\n        <View style={styles.micButtonsContainer}>\r\n          {[0, 1, 2].map(renderMicButton)}\r\n        </View>\r\n\r\n        <View style={styles.progressContainer}>\r\n          <View style={styles.progressBar}>\r\n            <View\r\n              style={[\r\n                styles.progressFill,\r\n                { width: `${(getProgress() / 3) * 100}%` },\r\n              ]}\r\n            />\r\n          </View>\r\n          <Text style={styles.progressText}>\r\n            {getProgress()}/3 completed\r\n          </Text>\r\n        </View>\r\n\r\n        <View style={styles.instructionBox}>\r\n          <Ionicons name=\"information-circle-outline\" size={24} color=\"#666\" />\r\n          <Text style={styles.instructionText}>\r\n            Please record in a quiet place for best accuracy.\r\n          </Text>\r\n        </View>\r\n\r\n        <TouchableOpacity\r\n          style={[\r\n            styles.continueButton,\r\n            { opacity: getProgress() === 3 ? 1 : 0.7 },\r\n          ]}\r\n          disabled={getProgress() !== 3 || false} // TODO: Disable during API calls\r\n          onPress={handleContinue}\r\n        >\r\n          {false ? ( // TODO: Show loading indicator during API calls\r\n            <ActivityIndicator color=\"#FFFFFF\" size=\"small\" />\r\n          ) : (\r\n            <>\r\n              <Text style={styles.continueButtonText}>Save & Continue</Text>\r\n              <Ionicons name=\"arrow-forward\" size={20} color=\"#FFF\" />\r\n            </>\r\n          )}\r\n        </TouchableOpacity>\r\n      </ScrollView>\r\n    </SafeAreaView>\r\n  );\r\n};\r\n\r\nexport default VoiceTrainingScreen; "],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}