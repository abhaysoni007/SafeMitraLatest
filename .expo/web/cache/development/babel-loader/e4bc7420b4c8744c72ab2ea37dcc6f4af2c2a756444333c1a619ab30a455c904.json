{"ast":null,"code":"import { useState, useEffect, useCallback } from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport DEFAULT_CONFIGURATION from './internal/defaultConfiguration';\nimport NativeInterface from './internal/nativeInterface';\nimport State from './internal/state';\nimport * as Types from './internal/types';\nlet _configuration = DEFAULT_CONFIGURATION;\nlet _state = null;\nconst createState = () => {\n  return new State(_configuration);\n};\nlet isRequestInProgress = false;\nlet requestQueue = [];\nexport function configure(configuration) {\n  _configuration = Object.assign({}, DEFAULT_CONFIGURATION, configuration);\n  if (_state) {\n    _state.tearDown();\n    _state = createState();\n  }\n  if (Platform.OS === 'ios') {\n    NativeInterface.configure(configuration);\n  }\n}\nexport function fetch(requestedInterface) {\n  if (!_state) {\n    _state = createState();\n  }\n  return _state.latest(requestedInterface);\n}\nexport function refresh() {\n  if (!_state) {\n    _state = createState();\n  }\n  if (isRequestInProgress) {\n    return new Promise(resolve => {\n      requestQueue.push(resolve);\n    });\n  }\n  isRequestInProgress = true;\n  return _state._fetchCurrentState().then(result => {\n    requestQueue.forEach(resolve => resolve(result));\n    requestQueue = [];\n    return result;\n  }).finally(() => {\n    isRequestInProgress = false;\n  });\n}\nexport function addEventListener(listener) {\n  if (!_state) {\n    _state = createState();\n  }\n  _state.add(listener);\n  return () => {\n    _state && _state.remove(listener);\n  };\n}\nexport function useNetInfo(configuration) {\n  if (configuration) {\n    configure(configuration);\n  }\n  const [netInfo, setNetInfo] = useState({\n    type: Types.NetInfoStateType.unknown,\n    isConnected: null,\n    isInternetReachable: null,\n    details: null\n  });\n  useEffect(() => {\n    const unsubscribe = addEventListener(setNetInfo);\n    return () => unsubscribe();\n  }, []);\n  return netInfo;\n}\nexport function useNetInfoInstance(isPaused = false, configuration) {\n  const [networkInfoManager, setNetworkInfoManager] = useState();\n  const [netInfo, setNetInfo] = useState({\n    type: Types.NetInfoStateType.unknown,\n    isConnected: null,\n    isInternetReachable: null,\n    details: null\n  });\n  useEffect(() => {\n    if (isPaused) {\n      return;\n    }\n    const config = Object.assign({}, DEFAULT_CONFIGURATION, configuration);\n    const state = new State(config);\n    setNetworkInfoManager(state);\n    state.add(setNetInfo);\n    return state.tearDown;\n  }, [isPaused, configuration]);\n  const refresh = useCallback(() => {\n    if (networkInfoManager && !isRequestInProgress) {\n      isRequestInProgress = true;\n      networkInfoManager._fetchCurrentState().finally(() => {\n        isRequestInProgress = false;\n      });\n    }\n  }, [networkInfoManager]);\n  return {\n    netInfo,\n    refresh\n  };\n}\nexport * from './internal/types';\nexport default {\n  configure,\n  fetch,\n  refresh,\n  addEventListener,\n  useNetInfo,\n  useNetInfoInstance\n};","map":{"version":3,"names":["useState","useEffect","useCallback","Platform","DEFAULT_CONFIGURATION","NativeInterface","State","Types","_configuration","_state","createState","isRequestInProgress","requestQueue","configure","configuration","Object","assign","tearDown","OS","fetch","requestedInterface","latest","refresh","Promise","resolve","push","_fetchCurrentState","then","result","forEach","finally","addEventListener","listener","add","remove","useNetInfo","netInfo","setNetInfo","type","NetInfoStateType","unknown","isConnected","isInternetReachable","details","unsubscribe","useNetInfoInstance","isPaused","networkInfoManager","setNetworkInfoManager","config","state"],"sources":["C:\\Users\\PC\\OneDrive\\latest\\SafeMitraLatest\\node_modules\\@react-native-community\\netinfo\\lib\\module\\index.ts"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nimport {useState, useEffect, useCallback} from 'react';\nimport {Platform} from 'react-native';\nimport DEFAULT_CONFIGURATION from './internal/defaultConfiguration';\nimport NativeInterface from './internal/nativeInterface';\nimport State from './internal/state';\nimport * as Types from './internal/types';\n\n// Stores the currently used configuration\nlet _configuration = DEFAULT_CONFIGURATION;\n\n// Stores the singleton reference to the state manager\nlet _state: State | null = null;\nconst createState = (): State => {\n  return new State(_configuration);\n};\n\n// Track ongoing requests\nlet isRequestInProgress = false;\nlet requestQueue: ((state: Types.NetInfoState) => void)[] = [];\n\n/**\n * Configures the library with the given configuration. Note that calling this will stop all\n * previously added listeners from being called again. It is best to call this right when your\n * application is started to avoid issues. The configuration sets up a global singleton instance.\n *\n * @param configuration The new configuration to set.\n */\nexport function configure(\n  configuration: Partial<Types.NetInfoConfiguration>,\n): void {\n  _configuration = {\n    ...DEFAULT_CONFIGURATION,\n    ...configuration,\n  };\n\n  if (_state) {\n    _state.tearDown();\n    _state = createState();\n  }\n\n  if (Platform.OS === 'ios') {\n    NativeInterface.configure(configuration);\n  }\n}\n\n/**\n * Returns a `Promise` that resolves to a `NetInfoState` object.\n * This function operates on the global singleton instance configured using `configure()`\n *\n * @param [requestedInterface] interface from which to obtain the information\n *\n * @returns A Promise which contains the current connection state.\n */\nexport function fetch(\n  requestedInterface?: string,\n): Promise<Types.NetInfoState> {\n  if (!_state) {\n    _state = createState();\n  }\n  return _state.latest(requestedInterface);\n}\n\n/**\n * Force-refreshes the internal state of the global singleton managed by this library.\n *\n * @returns A Promise which contains the updated connection state.\n */\nexport function refresh(): Promise<Types.NetInfoState> {\n  if (!_state) {\n    _state = createState();\n  }\n\n // If a request is already in progress, return a promise that will resolve when the current request finishes\n  if (isRequestInProgress) {\n    return new Promise((resolve) => {\n      requestQueue.push(resolve);\n    });\n  }\n\n  isRequestInProgress = true;\n\n  return _state._fetchCurrentState().then((result) => {\n    requestQueue.forEach((resolve) => resolve(result));\n    requestQueue = [];\n    return result;\n  }).finally(() => {\n    isRequestInProgress = false;\n  });\n}\n\n/**\n * Subscribe to the global singleton's connection information. The callback is called with a parameter of type\n * [`NetInfoState`](README.md#netinfostate) whenever the connection state changes. Your listener\n * will be called with the latest information soon after you subscribe and then with any\n * subsequent changes afterwards. You should not assume that the listener is called in the same\n * way across devices or platforms.\n *\n * @param listener The listener which is called when the network state changes.\n *\n * @returns A function which can be called to unsubscribe.\n */\nexport function addEventListener(\n  listener: Types.NetInfoChangeHandler,\n): Types.NetInfoSubscription {\n  if (!_state) {\n    _state = createState();\n  }\n\n  _state.add(listener);\n  return (): void => {\n    _state && _state.remove(listener);\n  };\n}\n\n/**\n * A React Hook into this library's singleton which updates when the connection state changes.\n *\n * @param {Partial<Types.NetInfoConfiguration>} configuration - Configure the isolated network checker managed by this hook\n *\n * @returns The connection state.\n */\nexport function useNetInfo(\n  configuration?: Partial<Types.NetInfoConfiguration>,\n): Types.NetInfoState {\n  if (configuration) {\n    configure(configuration);\n  }\n\n  const [netInfo, setNetInfo] = useState<Types.NetInfoState>({\n    type: Types.NetInfoStateType.unknown,\n    isConnected: null,\n    isInternetReachable: null,\n    details: null,\n  });\n\n  useEffect((): (() => void) => {\n    const unsubscribe = addEventListener(setNetInfo);\n    return () => unsubscribe();\n  }, []);\n\n  return netInfo;\n}\n\n/**\n * A React Hook which manages an isolated instance of the network info manager.\n * This is not a hook into a singleton shared state. NetInfo.configure, NetInfo.addEventListener,\n * NetInfo.fetch, NetInfo.refresh are performed on a global singleton and have no affect on this hook.\n * @param {boolean} isPaused - Pause the internal network checks.\n * @param {Partial<Types.NetInfoConfiguration>} configuration - Configure the isolated network checker managed by this hook\n *\n * @returns the netInfo state and a refresh function\n */\nexport function useNetInfoInstance(\n  isPaused = false,\n  configuration?: Partial<Types.NetInfoConfiguration>,\n) {\n  const [networkInfoManager, setNetworkInfoManager] = useState<State>();\n  const [netInfo, setNetInfo] = useState<Types.NetInfoState>({\n    type: Types.NetInfoStateType.unknown,\n    isConnected: null,\n    isInternetReachable: null,\n    details: null,\n  });\n\n  useEffect(() => {\n    if (isPaused) {\n      return;\n    }\n    const config = {\n      ...DEFAULT_CONFIGURATION,\n      ...configuration,\n    };\n    const state = new State(config);\n    setNetworkInfoManager(state);\n    state.add(setNetInfo);\n    return state.tearDown;\n  }, [isPaused, configuration]);\n\n  const refresh = useCallback(() => {\n    if (networkInfoManager && !isRequestInProgress) {\n      isRequestInProgress = true;\n      networkInfoManager._fetchCurrentState().finally(() => {\n        isRequestInProgress = false;\n      });\n    }\n  }, [networkInfoManager]);\n\n  return {\n    netInfo,\n    refresh,\n  };\n}\n\nexport * from './internal/types';\n\nexport default {\n  configure,\n  fetch,\n  refresh,\n  addEventListener,\n  useNetInfo,\n  useNetInfoInstance,\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}