{"ast":null,"code":"import { Audio } from 'expo-av';\nimport * as FileSystem from 'expo-file-system';\nimport Alert from \"react-native-web/dist/exports/Alert\";\nlet recording = null;\nconst voiceRecordingService = {\n  startRecording: async () => {\n    try {\n      if (recording) {\n        await recording.stopAndUnloadAsync();\n        recording = null;\n      }\n      const {\n        status\n      } = await Audio.requestPermissionsAsync();\n      if (status !== 'granted') {\n        Alert.alert('Permission Denied', 'Microphone access is required.');\n        return false;\n      }\n      await Audio.setAudioModeAsync({\n        allowsRecordingIOS: true,\n        playsInSilentModeIOS: true\n      });\n      const {\n        recording: newRecording\n      } = await Audio.Recording.createAsync(Audio.RecordingOptionsPresets.HIGH_QUALITY);\n      recording = newRecording;\n      console.log('üéô Recording started');\n      return true;\n    } catch (error) {\n      console.error('Failed to start recording:', error);\n      return false;\n    }\n  },\n  stopAndSaveRecording: async () => {\n    try {\n      if (!recording) return null;\n      await recording.stopAndUnloadAsync();\n      const uri = recording.getURI();\n      console.log('üõë Recording stopped. URI:', uri);\n      const localPath = `${FileSystem.documentDirectory}lastRecording.m4a`;\n      await FileSystem.moveAsync({\n        from: uri,\n        to: localPath\n      });\n      recording = null;\n      return localPath;\n    } catch (error) {\n      console.error('‚ùå Error stopping recording:', error);\n      return null;\n    }\n  },\n  uploadRecording: async fileUri => {\n    try {\n      const fileInfo = await FileSystem.getInfoAsync(fileUri);\n      if (!fileInfo.exists) {\n        console.error('Recording file not found.');\n        return false;\n      }\n      const formData = new FormData();\n      formData.append('audio', {\n        uri: fileUri,\n        name: 'recording.m4a',\n        type: 'audio/m4a'\n      });\n      const response = await fetch('http://192.168.137.153:3001/upload', {\n        method: 'POST',\n        body: formData,\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.error || 'Failed to upload');\n      }\n      const resData = await response.json();\n      console.log('‚úÖ Upload successful! Saved as:', resData.filename);\n      return true;\n    } catch (error) {\n      console.error('‚ùå Upload failed:', error);\n      Alert.alert('Upload Failed', 'Failed to upload recording. Please try again.', [{\n        text: 'OK'\n      }]);\n      return false;\n    }\n  }\n};\nexport default voiceRecordingService;","map":{"version":3,"names":["Audio","FileSystem","Alert","recording","voiceRecordingService","startRecording","stopAndUnloadAsync","status","requestPermissionsAsync","alert","setAudioModeAsync","allowsRecordingIOS","playsInSilentModeIOS","newRecording","Recording","createAsync","RecordingOptionsPresets","HIGH_QUALITY","console","log","error","stopAndSaveRecording","uri","getURI","localPath","documentDirectory","moveAsync","from","to","uploadRecording","fileUri","fileInfo","getInfoAsync","exists","formData","FormData","append","name","type","response","fetch","method","body","headers","ok","errorData","json","catch","Error","resData","filename","text"],"sources":["C:/Users/PC/OneDrive/latest/SafeMitraLatest/services/voiceRecordingService.js"],"sourcesContent":["import { Audio } from 'expo-av';\r\nimport * as FileSystem from 'expo-file-system';\r\nimport { Alert } from 'react-native';\r\n\r\nlet recording = null;\r\n\r\nconst voiceRecordingService = {\r\n  startRecording: async () => {\r\n    try {\r\n      // Stop any existing recording first\r\n      if (recording) {\r\n        await recording.stopAndUnloadAsync();\r\n        recording = null;\r\n      }\r\n\r\n      const { status } = await Audio.requestPermissionsAsync();\r\n      if (status !== 'granted') {\r\n        Alert.alert('Permission Denied', 'Microphone access is required.');\r\n        return false;\r\n      }\r\n\r\n      await Audio.setAudioModeAsync({\r\n        allowsRecordingIOS: true,\r\n        playsInSilentModeIOS: true,\r\n      });\r\n\r\n      const { recording: newRecording } = await Audio.Recording.createAsync(\r\n        Audio.RecordingOptionsPresets.HIGH_QUALITY\r\n      );\r\n\r\n      recording = newRecording;\r\n      console.log('üéô Recording started');\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Failed to start recording:', error);\r\n      return false;\r\n    }\r\n  },\r\n\r\n  stopAndSaveRecording: async () => {\r\n    try {\r\n      if (!recording) return null;\r\n\r\n      await recording.stopAndUnloadAsync();\r\n      const uri = recording.getURI();\r\n      console.log('üõë Recording stopped. URI:', uri);\r\n\r\n      const localPath = `${FileSystem.documentDirectory}lastRecording.m4a`;\r\n      await FileSystem.moveAsync({ from: uri, to: localPath });\r\n\r\n      recording = null;\r\n      return localPath;\r\n    } catch (error) {\r\n      console.error('‚ùå Error stopping recording:', error);\r\n      return null;\r\n    }\r\n  },\r\n\r\n  uploadRecording: async (fileUri) => {\r\n    try {\r\n      const fileInfo = await FileSystem.getInfoAsync(fileUri);\r\n      if (!fileInfo.exists) {\r\n        console.error('Recording file not found.');\r\n        return false;\r\n      }\r\n\r\n      const formData = new FormData();\r\n      formData.append('audio', {\r\n        uri: fileUri,\r\n        name: 'recording.m4a',\r\n        type: 'audio/m4a',\r\n      });\r\n\r\n      // Try to upload to the server\r\n      const response = await fetch('http://192.168.137.153:3001/upload', {\r\n        method: 'POST',\r\n        body: formData,\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n        },\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json().catch(() => ({}));\r\n        throw new Error(errorData.error || 'Failed to upload');\r\n      }\r\n\r\n      const resData = await response.json();\r\n      console.log('‚úÖ Upload successful! Saved as:', resData.filename);\r\n      return true;\r\n    } catch (error) {\r\n      console.error('‚ùå Upload failed:', error);\r\n      Alert.alert(\r\n        'Upload Failed',\r\n        'Failed to upload recording. Please try again.',\r\n        [{ text: 'OK' }]\r\n      );\r\n      return false;\r\n    }\r\n  },\r\n};\r\n\r\nexport default voiceRecordingService; "],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}